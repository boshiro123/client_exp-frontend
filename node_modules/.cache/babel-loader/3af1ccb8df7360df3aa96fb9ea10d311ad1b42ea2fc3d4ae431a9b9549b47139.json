{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api\";\nexport const clientsService = {\n  // Получение всех клиентов с их ответами\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error);\n      throw error;\n    }\n  },\n  // Получение клиента по ID\n  async getClientById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/clients/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching client with id ${id}:`, error);\n      throw error;\n    }\n  },\n  // Получение всех клиентов с фильтрацией\n  async getFilteredClients(filters) {\n    try {\n      const response = await axios.get(`${API_URL}/clients`, {\n        params: filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching filtered clients:\", error);\n      throw error;\n    }\n  },\n  // Получение доступных значений для фильтров\n  async getFilterOptions() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/filter-options`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching filter options:\", error);\n      // Возвращаем стандартные значения в случае ошибки\n      return {\n        ageGroups: [{\n          value: \"AGE_UNDER_18\",\n          label: \"До 18 лет\"\n        }, {\n          value: \"AGE_18_24\",\n          label: \"18-24 года\"\n        }, {\n          value: \"AGE_25_34\",\n          label: \"25-34 года\"\n        }, {\n          value: \"AGE_35_44\",\n          label: \"35-44 года\"\n        }, {\n          value: \"AGE_45_54\",\n          label: \"45-54 года\"\n        }, {\n          value: \"AGE_55_PLUS\",\n          label: \"55+ лет\"\n        }],\n        genders: [{\n          value: \"MALE\",\n          label: \"Мужской\"\n        }, {\n          value: \"FEMALE\",\n          label: \"Женский\"\n        }, {\n          value: \"OTHER\",\n          label: \"Другой\"\n        }],\n        professions: [{\n          value: \"Программист\",\n          label: \"Программист\"\n        }, {\n          value: \"Дизайнер\",\n          label: \"Дизайнер\"\n        }, {\n          value: \"Менеджер\",\n          label: \"Менеджер\"\n        }, {\n          value: \"Инженер\",\n          label: \"Инженер\"\n        }, {\n          value: \"Врач\",\n          label: \"Врач\"\n        }, {\n          value: \"Учитель\",\n          label: \"Учитель\"\n        }, {\n          value: \"Другое\",\n          label: \"Другое\"\n        }]\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","clientsService","getClientsWithAnswers","response","get","data","error","console","getClientById","id","getFilteredClients","filters","params","getFilterOptions","ageGroups","value","label","genders","professions"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/clients.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_URL = \"http://localhost:8080/api\"\n\nexport const clientsService = {\n  // Получение всех клиентов с их ответами\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`)\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error)\n      throw error\n    }\n  },\n\n  // Получение клиента по ID\n  async getClientById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/clients/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Error fetching client with id ${id}:`, error)\n      throw error\n    }\n  },\n\n  // Получение всех клиентов с фильтрацией\n  async getFilteredClients(filters) {\n    try {\n      const response = await axios.get(`${API_URL}/clients`, {\n        params: filters,\n      })\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching filtered clients:\", error)\n      throw error\n    }\n  },\n\n  // Получение доступных значений для фильтров\n  async getFilterOptions() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/filter-options`)\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching filter options:\", error)\n      // Возвращаем стандартные значения в случае ошибки\n      return {\n        ageGroups: [\n          { value: \"AGE_UNDER_18\", label: \"До 18 лет\" },\n          { value: \"AGE_18_24\", label: \"18-24 года\" },\n          { value: \"AGE_25_34\", label: \"25-34 года\" },\n          { value: \"AGE_35_44\", label: \"35-44 года\" },\n          { value: \"AGE_45_54\", label: \"45-54 года\" },\n          { value: \"AGE_55_PLUS\", label: \"55+ лет\" },\n        ],\n        genders: [\n          { value: \"MALE\", label: \"Мужской\" },\n          { value: \"FEMALE\", label: \"Женский\" },\n          { value: \"OTHER\", label: \"Другой\" },\n        ],\n        professions: [\n          { value: \"Программист\", label: \"Программист\" },\n          { value: \"Дизайнер\", label: \"Дизайнер\" },\n          { value: \"Менеджер\", label: \"Менеджер\" },\n          { value: \"Инженер\", label: \"Инженер\" },\n          { value: \"Врач\", label: \"Врач\" },\n          { value: \"Учитель\", label: \"Учитель\" },\n          { value: \"Другое\", label: \"Другое\" },\n        ],\n      }\n    }\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}