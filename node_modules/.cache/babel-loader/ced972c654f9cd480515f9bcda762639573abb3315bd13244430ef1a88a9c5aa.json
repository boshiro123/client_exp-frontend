{"ast":null,"code":"var _jsxFileName = \"/Users/shirokiy/Desktop/Repositories/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u044B/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { authService } from \"../../api/auth\";\n\n/**\n * Компонент для защищенных маршрутов, требующих аутентификации\n * Если пользователь не авторизован, перенаправляет на страницу входа\n * @param {Object} props - Свойства компонента\n * @param {boolean} props.adminOnly - Если true, то только администраторы имеют доступ\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  adminOnly\n}) => {\n  _s();\n  const location = useLocation();\n  const isAuthenticated = authService.isAuthenticated();\n  const currentUser = authService.getCurrentUser();\n\n  // Если пользователь не авторизован, перенаправляем на страницу входа\n  // с сохранением URL, на который он пытался попасть\n  if (!isAuthenticated) {\n    // Сохраняем путь, чтобы перенаправить пользователя после входа\n    localStorage.setItem(\"redirectAfterLogin\", location.pathname);\n\n    // Перенаправляем на страницу входа\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Проверяем роль, если требуется доступ администратора\n  if (adminOnly && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) !== \"ADMIN\") {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Если пользователь авторизован, отображаем защищенный маршрут\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","authService","jsxDEV","_jsxDEV","ProtectedRoute","adminOnly","_s","location","isAuthenticated","currentUser","getCurrentUser","localStorage","setItem","pathname","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\"\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\"\nimport { authService } from \"../../api/auth\"\n\n/**\n * Компонент для защищенных маршрутов, требующих аутентификации\n * Если пользователь не авторизован, перенаправляет на страницу входа\n * @param {Object} props - Свойства компонента\n * @param {boolean} props.adminOnly - Если true, то только администраторы имеют доступ\n */\nconst ProtectedRoute = ({ adminOnly }) => {\n  const location = useLocation()\n  const isAuthenticated = authService.isAuthenticated()\n  const currentUser = authService.getCurrentUser()\n\n  // Если пользователь не авторизован, перенаправляем на страницу входа\n  // с сохранением URL, на который он пытался попасть\n  if (!isAuthenticated) {\n    // Сохраняем путь, чтобы перенаправить пользователя после входа\n    localStorage.setItem(\"redirectAfterLogin\", location.pathname)\n\n    // Перенаправляем на страницу входа\n    return <Navigate to=\"/login\" state={{ from: location }} replace />\n  }\n\n  // Проверяем роль, если требуется доступ администратора\n  if (adminOnly && currentUser?.role !== \"ADMIN\") {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  // Если пользователь авторизован, отображаем защищенный маршрут\n  return <Outlet />\n}\n\nexport default ProtectedRoute\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,gBAAgB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AALA,SAAAC,MAAA,IAAAC,OAAA;AAMA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,eAAe,GAAGP,WAAW,CAACO,eAAe,CAAC,CAAC;EACrD,MAAMC,WAAW,GAAGR,WAAW,CAACS,cAAc,CAAC,CAAC;;EAEhD;EACA;EACA,IAAI,CAACF,eAAe,EAAE;IACpB;IACAG,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEL,QAAQ,CAACM,QAAQ,CAAC;;IAE7D;IACA,oBAAOV,OAAA,CAACL,QAAQ;MAACgB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS,CAAE;MAACU,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,IAAIhB,SAAS,IAAI,CAAAI,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEa,IAAI,MAAK,OAAO,EAAE;IAC9C,oBAAOnB,OAAA,CAACL,QAAQ;MAACgB,EAAE,EAAC,YAAY;MAACG,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7C;;EAEA;EACA,oBAAOlB,OAAA,CAACJ,MAAM;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAAAf,EAAA,CAtBKF,cAAc;EAAA,QACDJ,WAAW;AAAA;AAAAuB,EAAA,GADxBnB,cAAc;AAwBpB,eAAeA,cAAc;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}