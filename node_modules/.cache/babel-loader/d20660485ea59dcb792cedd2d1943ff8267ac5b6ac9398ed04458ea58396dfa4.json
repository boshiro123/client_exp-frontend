{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./auth\";\nconst API_URL = \"http://localhost:8080/api/surveys\";\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL\n    });\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(config => {\n      // Добавляем токен авторизации к заголовкам запроса\n      const token = authService.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      console.log(\"Отправляемые данные:\", JSON.stringify(surveyData, null, 2));\n      const response = await this.api.post(\"\", surveyData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error);\n      throw error;\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      const response = await this.api.get(\"/public\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error);\n      throw error;\n    }\n  }\n  // Получение всех опросников\n  async getAllSurveysPublic() {\n    try {\n      const response = await this.api.get(\"/public\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error);\n      throw error;\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      const response = await this.api.get(`/public/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Получение публичного опросника по ID (без авторизации)\n  async getPublicSurveyById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/public/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при получении публичного опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Получение списка всех публичных опросников\n  async getPublicSurveys() {\n    try {\n      const response = await axios.get(`${API_URL}/public`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении списка публичных опросников:\", error);\n      throw error;\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      const response = await this.api.put(`/${id}`, surveyData);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      const response = await this.api.delete(`/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      const response = await this.api.patch(`/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Получение ответов на опросник по ID опросника\n  async getSurveyResponses(surveyId) {\n    try {\n      const response = await this.api.get(`/responses/${surveyId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при получении ответов на опросник с ID ${surveyId}:`, error);\n      throw error;\n    }\n  }\n\n  // Отправка ответов на опрос\n  async submitSurveyResponse(responseData) {\n    try {\n      console.log(\"Отправка ответов на опрос:\", JSON.stringify(responseData, null, 2));\n\n      // Проверяем наличие данных о респонденте\n      if (!responseData.respondent) {\n        throw new Error(\"Отсутствуют данные о респонденте\");\n      }\n      const response = await axios.post(`/responses/${API_URL}`, responseData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при отправке ответов на опрос:\", error);\n      throw error;\n    }\n  }\n}\nexport const surveyService = new SurveyService();","map":{"version":3,"names":["axios","authService","API_URL","SurveyService","constructor","api","create","baseURL","interceptors","request","use","config","token","getToken","headers","Authorization","error","Promise","reject","createSurvey","surveyData","console","log","JSON","stringify","response","post","data","getAllSurveys","get","getAllSurveysPublic","getSurveyById","id","getPublicSurveyById","getPublicSurveys","updateSurvey","put","deleteSurvey","delete","changeSurveyStatus","status","patch","getSurveyResponses","surveyId","submitSurveyResponse","responseData","respondent","Error","surveyService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/survey.js"],"sourcesContent":["import axios from \"axios\"\nimport { authService } from \"./auth\"\n\nconst API_URL = \"http://localhost:8080/api/surveys\"\n\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n    })\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(\n      config => {\n        // Добавляем токен авторизации к заголовкам запроса\n        const token = authService.getToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      error => {\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      console.log(\"Отправляемые данные:\", JSON.stringify(surveyData, null, 2))\n      const response = await this.api.post(\"\", surveyData)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error)\n      throw error\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      const response = await this.api.get(\"/public\")\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error)\n      throw error\n    }\n  }\n  // Получение всех опросников\n  async getAllSurveysPublic() {\n    try {\n      const response = await this.api.get(\"/public\")\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error)\n      throw error\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      const response = await this.api.get(`/public/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Получение публичного опросника по ID (без авторизации)\n  async getPublicSurveyById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/public/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(\n        `Ошибка при получении публичного опросника с ID ${id}:`,\n        error\n      )\n      throw error\n    }\n  }\n\n  // Получение списка всех публичных опросников\n  async getPublicSurveys() {\n    try {\n      const response = await axios.get(`${API_URL}/public`)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении списка публичных опросников:\", error)\n      throw error\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      const response = await this.api.put(`/${id}`, surveyData)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      const response = await this.api.delete(`/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      const response = await this.api.patch(`/${id}/status`, { status })\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Получение ответов на опросник по ID опросника\n  async getSurveyResponses(surveyId) {\n    try {\n      const response = await this.api.get(`/responses/${surveyId}`)\n      return response.data\n    } catch (error) {\n      console.error(\n        `Ошибка при получении ответов на опросник с ID ${surveyId}:`,\n        error\n      )\n      throw error\n    }\n  }\n\n  // Отправка ответов на опрос\n  async submitSurveyResponse(responseData) {\n    try {\n      console.log(\n        \"Отправка ответов на опрос:\",\n        JSON.stringify(responseData, null, 2)\n      )\n\n      // Проверяем наличие данных о респонденте\n      if (!responseData.respondent) {\n        throw new Error(\"Отсутствуют данные о респонденте\")\n      }\n\n      const response = await axios.post(`/responses/${API_URL}`, responseData)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при отправке ответов на опрос:\", error)\n      throw error\n    }\n  }\n}\n\nexport const surveyService = new SurveyService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}