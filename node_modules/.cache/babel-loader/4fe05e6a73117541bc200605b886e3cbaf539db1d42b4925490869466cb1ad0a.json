{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api\";\nexport const questionsService = {\n  // Получение всех вопросов\n  async getAllQuestions() {\n    try {\n      const response = await axios.get(`${API_URL}/questions`);\n\n      // Проверяем ответ\n      if (!response.data) {\n        console.warn(\"Empty response data from API\");\n        return [];\n      }\n\n      // Если response.data уже массив, просто возвращаем его\n      if (Array.isArray(response.data)) {\n        return response.data;\n      }\n\n      // Если response.data - объект, который может содержать массив в поле content или data\n      if (Array.isArray(response.data.content)) {\n        return response.data.content;\n      } else if (Array.isArray(response.data.data)) {\n        return response.data.data;\n      } else if (Array.isArray(response.data.items)) {\n        return response.data.items;\n      } else if (Array.isArray(response.data.questions)) {\n        return response.data.questions;\n      }\n\n      // Если не нашли подходящего массива, логируем и возвращаем пустой массив\n      console.warn(\"API response structure is not as expected:\", response.data);\n      return [];\n    } catch (error) {\n      console.error(\"Error fetching questions:\", error);\n      throw error;\n    }\n  },\n  // Получение вопроса по ID\n  async getQuestionById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/questions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching question with id ${id}:`, error);\n      throw error;\n    }\n  },\n  // Создание нового вопроса\n  async createQuestion(questionData) {\n    try {\n      const response = await axios.post(`${API_URL}/questions`, questionData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating question:\", error);\n      throw error;\n    }\n  },\n  // Обновление существующего вопроса\n  async updateQuestion(id, questionData) {\n    try {\n      const response = await axios.put(`${API_URL}/questions/${id}`, questionData);\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating question with id ${id}:`, error);\n      throw error;\n    }\n  },\n  // Удаление вопроса\n  async deleteQuestion(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/questions/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error deleting question with id ${id}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","questionsService","getAllQuestions","response","get","data","console","warn","Array","isArray","content","items","questions","error","getQuestionById","id","createQuestion","questionData","post","updateQuestion","put","deleteQuestion","delete"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/questions.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_URL = \"http://localhost:8080/api\"\n\nexport const questionsService = {\n  // Получение всех вопросов\n  async getAllQuestions() {\n    try {\n      const response = await axios.get(`${API_URL}/questions`)\n\n      // Проверяем ответ\n      if (!response.data) {\n        console.warn(\"Empty response data from API\")\n        return []\n      }\n\n      // Если response.data уже массив, просто возвращаем его\n      if (Array.isArray(response.data)) {\n        return response.data\n      }\n\n      // Если response.data - объект, который может содержать массив в поле content или data\n      if (Array.isArray(response.data.content)) {\n        return response.data.content\n      } else if (Array.isArray(response.data.data)) {\n        return response.data.data\n      } else if (Array.isArray(response.data.items)) {\n        return response.data.items\n      } else if (Array.isArray(response.data.questions)) {\n        return response.data.questions\n      }\n\n      // Если не нашли подходящего массива, логируем и возвращаем пустой массив\n      console.warn(\"API response structure is not as expected:\", response.data)\n      return []\n    } catch (error) {\n      console.error(\"Error fetching questions:\", error)\n      throw error\n    }\n  },\n\n  // Получение вопроса по ID\n  async getQuestionById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/questions/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Error fetching question with id ${id}:`, error)\n      throw error\n    }\n  },\n\n  // Создание нового вопроса\n  async createQuestion(questionData) {\n    try {\n      const response = await axios.post(`${API_URL}/questions`, questionData)\n      return response.data\n    } catch (error) {\n      console.error(\"Error creating question:\", error)\n      throw error\n    }\n  },\n\n  // Обновление существующего вопроса\n  async updateQuestion(id, questionData) {\n    try {\n      const response = await axios.put(\n        `${API_URL}/questions/${id}`,\n        questionData\n      )\n      return response.data\n    } catch (error) {\n      console.error(`Error updating question with id ${id}:`, error)\n      throw error\n    }\n  },\n\n  // Удаление вопроса\n  async deleteQuestion(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/questions/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Error deleting question with id ${id}:`, error)\n      throw error\n    }\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}