{"ast":null,"code":"var _jsxFileName = \"/Users/shirokiy/Desktop/Repositories/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u044B/ClientExp/client_exp-frontend/src/pages/Questions/QuestionsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { questionsService } from \"../../api/questions\";\nimport Sidebar from \"../../components/common/Sidebar\";\nimport { authService } from \"../../api/auth\";\nimport \"./QuestionsPage.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuestionsPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Состояние для модального окна добавления/редактирования вопроса\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n\n  // Состояние для загрузки вариантов ответов\n  const [loadingOptions, setLoadingOptions] = useState(false);\n\n  // Состояние для формы вопроса\n  const [formData, setFormData] = useState({\n    text: \"\",\n    type: \"TEXT\",\n    // По умолчанию текстовый тип\n    required: false,\n    category: \"\",\n    orderNumber: 0,\n    options: []\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    const user = authService.getCurrentUser();\n    if (!user || user.role !== \"ADMIN\" && user.role !== \"MANAGER\") {\n      navigate(\"/login\");\n      return;\n    }\n    setCurrentUser(user);\n    fetchQuestions();\n  }, [navigate]);\n  const fetchQuestions = async () => {\n    try {\n      setLoading(true);\n      const data = await questionsService.getAllQuestions();\n      // Проверяем, что data является массивом, иначе используем пустой массив\n      setQuestions(Array.isArray(data) ? data : []);\n      setError(null);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(\"Ошибка при загрузке вопросов: \" + (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message));\n      console.error(\"Failed to fetch questions:\", err);\n      setQuestions([]); // Устанавливаем пустой массив в случае ошибки\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Загрузка вариантов ответов для вопроса\n  const fetchOptionsForQuestion = async questionId => {\n    if (!questionId) return [];\n    try {\n      setLoadingOptions(true);\n      const options = await questionsService.getQuestionOptions(questionId);\n      return Array.isArray(options) ? options : [];\n    } catch (err) {\n      console.error(`Error fetching options for question ${questionId}:`, err);\n      return [];\n    } finally {\n      setLoadingOptions(false);\n    }\n  };\n  const openAddModal = () => {\n    setCurrentQuestion(null);\n    setFormData({\n      text: \"\",\n      type: \"TEXT\",\n      required: false,\n      category: \"\",\n      orderNumber: questions.length + 1,\n      options: []\n    });\n    setIsModalOpen(true);\n  };\n  const openEditModal = async question => {\n    setCurrentQuestion(question);\n    setLoadingOptions(true);\n\n    // Загружаем варианты ответов с сервера для вопросов с выбором\n    let options = [];\n    if (question.type === \"SINGLE_CHOICE\" || question.type === \"MULTIPLE_CHOICE\") {\n      options = await fetchOptionsForQuestion(question.id);\n    }\n    setFormData({\n      text: question.text,\n      type: question.type,\n      required: question.required,\n      category: question.category || \"\",\n      orderNumber: question.orderNumber || 0,\n      options: options.length > 0 ? options : question.options || []\n    });\n    setLoadingOptions(false);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setCurrentQuestion(null);\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n\n    // Если меняется тип вопроса и новый тип не поддерживает варианты ответов,\n    // очищаем массив вариантов\n    if (name === \"type\" && value !== \"SINGLE_CHOICE\" && value !== \"MULTIPLE_CHOICE\") {\n      setFormData({\n        ...formData,\n        [name]: value,\n        options: []\n      });\n    } else {\n      setFormData({\n        ...formData,\n        [name]: type === \"checkbox\" ? checked : value\n      });\n    }\n  };\n  const handleAddOption = () => {\n    setFormData({\n      ...formData,\n      options: [...formData.options, {\n        text: \"\"\n      }]\n    });\n  };\n  const handleOptionChange = (index, value) => {\n    var _updatedOptions$index;\n    const updatedOptions = [...formData.options];\n\n    // Сохраняем id варианта ответа, если он уже существует\n    const optionId = (_updatedOptions$index = updatedOptions[index]) === null || _updatedOptions$index === void 0 ? void 0 : _updatedOptions$index.id;\n    updatedOptions[index] = {\n      ...(optionId ? {\n        id: optionId\n      } : {}),\n      text: value,\n      orderNumber: index + 1\n    };\n    setFormData({\n      ...formData,\n      options: updatedOptions\n    });\n  };\n  const handleRemoveOption = async index => {\n    const options = [...formData.options];\n    const optionToRemove = options[index];\n\n    // Если у варианта ответа есть id, значит он уже существует в базе\n    // и нужно удалить его через API\n    if (optionToRemove !== null && optionToRemove !== void 0 && optionToRemove.id && currentQuestion !== null && currentQuestion !== void 0 && currentQuestion.id) {\n      try {\n        await questionsService.deleteOption(optionToRemove.id);\n      } catch (err) {\n        console.error(`Error deleting option ${optionToRemove.id}:`, err);\n      }\n    }\n    const updatedOptions = options.filter((_, i) => i !== index);\n    setFormData({\n      ...formData,\n      options: updatedOptions\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      let savedQuestion;\n      const questionData = {\n        ...formData\n      };\n\n      // Не отправляем варианты ответов вместе с вопросом\n      delete questionData.options;\n      if (currentQuestion) {\n        // Обновление существующего вопроса\n        savedQuestion = await questionsService.updateQuestion(currentQuestion.id, questionData);\n      } else {\n        // Создание нового вопроса\n        savedQuestion = await questionsService.createQuestion(questionData);\n      }\n\n      // Если это вопрос с вариантами, сохраняем варианты ответов\n      if ((formData.type === \"SINGLE_CHOICE\" || formData.type === \"MULTIPLE_CHOICE\") && savedQuestion && savedQuestion.id) {\n        // Сохраняем каждый вариант ответа\n        for (const option of formData.options) {\n          try {\n            const optionData = {\n              text: option.text,\n              orderNumber: option.orderNumber || 0\n            };\n            if (option.id) {\n              // Обновляем существующий вариант\n              await questionsService.updateOption(option.id, optionData);\n            } else {\n              // Создаем новый вариант\n              await questionsService.createOption(savedQuestion.id, optionData);\n            }\n          } catch (err) {\n            console.error(\"Error saving option:\", err);\n          }\n        }\n      }\n      closeModal();\n      fetchQuestions(); // Обновляем список после изменений\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(\"Ошибка при сохранении вопроса: \" + (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message));\n      console.error(\"Failed to save question:\", err);\n    }\n  };\n  const handleDeleteQuestion = async id => {\n    if (window.confirm(\"Вы уверены, что хотите удалить этот вопрос?\")) {\n      try {\n        await questionsService.deleteQuestion(id);\n        fetchQuestions(); // Обновляем список после удаления\n      } catch (err) {\n        var _err$response3, _err$response3$data;\n        setError(\"Ошибка при удалении вопроса: \" + (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message));\n        console.error(\"Failed to delete question:\", err);\n      }\n    }\n  };\n\n  // Функция для отображения типа вопроса в читаемом формате\n  const getQuestionTypeLabel = type => {\n    const types = {\n      TEXT: \"Текстовый\",\n      MULTIPLE_CHOICE: \"Множественный выбор\",\n      SINGLE_CHOICE: \"Одиночный выбор\",\n      RATING: \"Оценка\",\n      DATE: \"Дата\"\n    };\n    return types[type] || type;\n  };\n\n  // Функция для фильтрации вопросов по поисковому запросу\n  const getFilteredQuestions = () => {\n    if (!searchTerm.trim()) return questions;\n    return questions.filter(question => {\n      const searchLower = searchTerm.toLowerCase();\n      return question.text.toLowerCase().includes(searchLower) || question.category && question.category.toLowerCase().includes(searchLower) || getQuestionTypeLabel(question.type).toLowerCase().includes(searchLower);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      user: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u0411\\u0430\\u0437\\u0430 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-add-question\",\n          onClick: openAddModal,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 19\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-list\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u2116\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0422\\u0435\\u043A\\u0441\\u0442 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0422\\u0438\\u043F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u044B\\u0439\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: !Array.isArray(questions) || questions.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: \"7\",\n                className: \"no-data\",\n                children: \"\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u044B\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this) : getFilteredQuestions().map((question, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.orderNumber || index + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: getQuestionTypeLabel(question.type)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.category || \"Без категории\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: question.required ? \"Да\" : \"Нет\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"actions\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-edit\",\n                  onClick: () => openEditModal(question),\n                  children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn-delete\",\n                  onClick: () => handleDeleteQuestion(question.id),\n                  children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 23\n              }, this)]\n            }, question.id || index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"close\",\n            onClick: closeModal,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: currentQuestion ? \"Редактирование вопроса\" : \"Добавление вопроса\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"text\",\n                children: \"\\u0422\\u0435\\u043A\\u0441\\u0442 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u0430*:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"text\",\n                name: \"text\",\n                value: formData.text,\n                onChange: handleInputChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"type\",\n                children: \"\\u0422\\u0438\\u043F \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u0430*:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"type\",\n                name: \"type\",\n                value: formData.type,\n                onChange: handleInputChange,\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"TEXT\",\n                  children: \"\\u0422\\u0435\\u043A\\u0441\\u0442\\u043E\\u0432\\u044B\\u0439\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"SINGLE_CHOICE\",\n                  children: \"\\u041E\\u0434\\u0438\\u043D\\u043E\\u0447\\u043D\\u044B\\u0439 \\u0432\\u044B\\u0431\\u043E\\u0440\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"MULTIPLE_CHOICE\",\n                  children: \"\\u041C\\u043D\\u043E\\u0436\\u0435\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u044B\\u0439 \\u0432\\u044B\\u0431\\u043E\\u0440\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"RATING\",\n                  children: \"\\u041E\\u0446\\u0435\\u043D\\u043A\\u0430\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"DATE\",\n                  children: \"\\u0414\\u0430\\u0442\\u0430\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"category\",\n                children: \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"category\",\n                name: \"category\",\n                value: formData.category,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"orderNumber\",\n                children: \"\\u041F\\u043E\\u0440\\u044F\\u0434\\u043A\\u043E\\u0432\\u044B\\u0439 \\u043D\\u043E\\u043C\\u0435\\u0440:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                id: \"orderNumber\",\n                name: \"orderNumber\",\n                value: formData.orderNumber,\n                onChange: handleInputChange,\n                min: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group checkbox\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: \"required\",\n                  checked: formData.required,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 433,\n                  columnNumber: 21\n                }, this), \"\\u041E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u044B\\u0439 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), (formData.type === \"SINGLE_CHOICE\" || formData.type === \"MULTIPLE_CHOICE\") && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"options-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u044B \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 21\n              }, this), loadingOptions ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-spinner\",\n                children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u043E\\u0432...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [formData.options.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"no-options\",\n                  children: \"\\u041D\\u0435\\u0442 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u043E\\u0432 \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 27\n                }, this) : formData.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"option-row\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"option-number\",\n                    children: [index + 1, \".\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: option.text,\n                    onChange: e => handleOptionChange(index, e.target.value),\n                    placeholder: \"\\u0422\\u0435\\u043A\\u0441\\u0442 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u0430 \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430\",\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 466,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn-remove-option\",\n                    onClick: () => handleRemoveOption(index),\n                    children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 475,\n                    columnNumber: 31\n                  }, this)]\n                }, option.id || index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 29\n                }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  className: \"btn-add-option\",\n                  onClick: handleAddOption,\n                  children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 486,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn-save\",\n                disabled: loadingOptions,\n                children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 499,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn-cancel\",\n                onClick: closeModal,\n                children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 295,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionsPage, \"DIR6BX4v88I7Mli4lj0wvpAWWUM=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionsPage;\nexport default QuestionsPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionsPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","questionsService","Sidebar","authService","jsxDEV","_jsxDEV","Fragment","_Fragment","QuestionsPage","_s","questions","setQuestions","loading","setLoading","error","setError","currentUser","setCurrentUser","searchTerm","setSearchTerm","isModalOpen","setIsModalOpen","currentQuestion","setCurrentQuestion","loadingOptions","setLoadingOptions","formData","setFormData","text","type","required","category","orderNumber","options","navigate","user","getCurrentUser","role","fetchQuestions","data","getAllQuestions","Array","isArray","err","_err$response","_err$response$data","response","message","console","fetchOptionsForQuestion","questionId","getQuestionOptions","openAddModal","length","openEditModal","question","id","closeModal","handleInputChange","e","name","value","checked","target","handleAddOption","handleOptionChange","index","_updatedOptions$index","updatedOptions","optionId","handleRemoveOption","optionToRemove","deleteOption","filter","_","i","handleSubmit","preventDefault","savedQuestion","questionData","updateQuestion","createQuestion","option","optionData","updateOption","createOption","_err$response2","_err$response2$data","handleDeleteQuestion","window","confirm","deleteQuestion","_err$response3","_err$response3$data","getQuestionTypeLabel","types","TEXT","MULTIPLE_CHOICE","SINGLE_CHOICE","RATING","DATE","getFilteredQuestions","trim","searchLower","toLowerCase","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","colSpan","map","onSubmit","htmlFor","onChange","min","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/pages/Questions/QuestionsPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport { questionsService } from \"../../api/questions\"\nimport Sidebar from \"../../components/common/Sidebar\"\nimport { authService } from \"../../api/auth\"\nimport \"./QuestionsPage.css\"\n\nconst QuestionsPage = () => {\n  const [questions, setQuestions] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [currentUser, setCurrentUser] = useState(null)\n  const [searchTerm, setSearchTerm] = useState(\"\")\n\n  // Состояние для модального окна добавления/редактирования вопроса\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  const [currentQuestion, setCurrentQuestion] = useState(null)\n\n  // Состояние для загрузки вариантов ответов\n  const [loadingOptions, setLoadingOptions] = useState(false)\n\n  // Состояние для формы вопроса\n  const [formData, setFormData] = useState({\n    text: \"\",\n    type: \"TEXT\", // По умолчанию текстовый тип\n    required: false,\n    category: \"\",\n    orderNumber: 0,\n    options: [],\n  })\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    const user = authService.getCurrentUser()\n    if (!user || (user.role !== \"ADMIN\" && user.role !== \"MANAGER\")) {\n      navigate(\"/login\")\n      return\n    }\n    setCurrentUser(user)\n\n    fetchQuestions()\n  }, [navigate])\n\n  const fetchQuestions = async () => {\n    try {\n      setLoading(true)\n      const data = await questionsService.getAllQuestions()\n      // Проверяем, что data является массивом, иначе используем пустой массив\n      setQuestions(Array.isArray(data) ? data : [])\n      setError(null)\n    } catch (err) {\n      setError(\n        \"Ошибка при загрузке вопросов: \" +\n          (err.response?.data?.message || err.message)\n      )\n      console.error(\"Failed to fetch questions:\", err)\n      setQuestions([]) // Устанавливаем пустой массив в случае ошибки\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Загрузка вариантов ответов для вопроса\n  const fetchOptionsForQuestion = async questionId => {\n    if (!questionId) return []\n\n    try {\n      setLoadingOptions(true)\n      const options = await questionsService.getQuestionOptions(questionId)\n      return Array.isArray(options) ? options : []\n    } catch (err) {\n      console.error(`Error fetching options for question ${questionId}:`, err)\n      return []\n    } finally {\n      setLoadingOptions(false)\n    }\n  }\n\n  const openAddModal = () => {\n    setCurrentQuestion(null)\n    setFormData({\n      text: \"\",\n      type: \"TEXT\",\n      required: false,\n      category: \"\",\n      orderNumber: questions.length + 1,\n      options: [],\n    })\n    setIsModalOpen(true)\n  }\n\n  const openEditModal = async question => {\n    setCurrentQuestion(question)\n    setLoadingOptions(true)\n\n    // Загружаем варианты ответов с сервера для вопросов с выбором\n    let options = []\n    if (\n      question.type === \"SINGLE_CHOICE\" ||\n      question.type === \"MULTIPLE_CHOICE\"\n    ) {\n      options = await fetchOptionsForQuestion(question.id)\n    }\n\n    setFormData({\n      text: question.text,\n      type: question.type,\n      required: question.required,\n      category: question.category || \"\",\n      orderNumber: question.orderNumber || 0,\n      options: options.length > 0 ? options : question.options || [],\n    })\n\n    setLoadingOptions(false)\n    setIsModalOpen(true)\n  }\n\n  const closeModal = () => {\n    setIsModalOpen(false)\n    setCurrentQuestion(null)\n  }\n\n  const handleInputChange = e => {\n    const { name, value, type, checked } = e.target\n\n    // Если меняется тип вопроса и новый тип не поддерживает варианты ответов,\n    // очищаем массив вариантов\n    if (\n      name === \"type\" &&\n      value !== \"SINGLE_CHOICE\" &&\n      value !== \"MULTIPLE_CHOICE\"\n    ) {\n      setFormData({\n        ...formData,\n        [name]: value,\n        options: [],\n      })\n    } else {\n      setFormData({\n        ...formData,\n        [name]: type === \"checkbox\" ? checked : value,\n      })\n    }\n  }\n\n  const handleAddOption = () => {\n    setFormData({\n      ...formData,\n      options: [...formData.options, { text: \"\" }],\n    })\n  }\n\n  const handleOptionChange = (index, value) => {\n    const updatedOptions = [...formData.options]\n\n    // Сохраняем id варианта ответа, если он уже существует\n    const optionId = updatedOptions[index]?.id\n    updatedOptions[index] = {\n      ...(optionId ? { id: optionId } : {}),\n      text: value,\n      orderNumber: index + 1,\n    }\n\n    setFormData({\n      ...formData,\n      options: updatedOptions,\n    })\n  }\n\n  const handleRemoveOption = async index => {\n    const options = [...formData.options]\n    const optionToRemove = options[index]\n\n    // Если у варианта ответа есть id, значит он уже существует в базе\n    // и нужно удалить его через API\n    if (optionToRemove?.id && currentQuestion?.id) {\n      try {\n        await questionsService.deleteOption(optionToRemove.id)\n      } catch (err) {\n        console.error(`Error deleting option ${optionToRemove.id}:`, err)\n      }\n    }\n\n    const updatedOptions = options.filter((_, i) => i !== index)\n    setFormData({\n      ...formData,\n      options: updatedOptions,\n    })\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault()\n\n    try {\n      let savedQuestion\n      const questionData = { ...formData }\n\n      // Не отправляем варианты ответов вместе с вопросом\n      delete questionData.options\n\n      if (currentQuestion) {\n        // Обновление существующего вопроса\n        savedQuestion = await questionsService.updateQuestion(\n          currentQuestion.id,\n          questionData\n        )\n      } else {\n        // Создание нового вопроса\n        savedQuestion = await questionsService.createQuestion(questionData)\n      }\n\n      // Если это вопрос с вариантами, сохраняем варианты ответов\n      if (\n        (formData.type === \"SINGLE_CHOICE\" ||\n          formData.type === \"MULTIPLE_CHOICE\") &&\n        savedQuestion &&\n        savedQuestion.id\n      ) {\n        // Сохраняем каждый вариант ответа\n        for (const option of formData.options) {\n          try {\n            const optionData = {\n              text: option.text,\n              orderNumber: option.orderNumber || 0,\n            }\n\n            if (option.id) {\n              // Обновляем существующий вариант\n              await questionsService.updateOption(option.id, optionData)\n            } else {\n              // Создаем новый вариант\n              await questionsService.createOption(savedQuestion.id, optionData)\n            }\n          } catch (err) {\n            console.error(\"Error saving option:\", err)\n          }\n        }\n      }\n\n      closeModal()\n      fetchQuestions() // Обновляем список после изменений\n    } catch (err) {\n      setError(\n        \"Ошибка при сохранении вопроса: \" +\n          (err.response?.data?.message || err.message)\n      )\n      console.error(\"Failed to save question:\", err)\n    }\n  }\n\n  const handleDeleteQuestion = async id => {\n    if (window.confirm(\"Вы уверены, что хотите удалить этот вопрос?\")) {\n      try {\n        await questionsService.deleteQuestion(id)\n        fetchQuestions() // Обновляем список после удаления\n      } catch (err) {\n        setError(\n          \"Ошибка при удалении вопроса: \" +\n            (err.response?.data?.message || err.message)\n        )\n        console.error(\"Failed to delete question:\", err)\n      }\n    }\n  }\n\n  // Функция для отображения типа вопроса в читаемом формате\n  const getQuestionTypeLabel = type => {\n    const types = {\n      TEXT: \"Текстовый\",\n      MULTIPLE_CHOICE: \"Множественный выбор\",\n      SINGLE_CHOICE: \"Одиночный выбор\",\n      RATING: \"Оценка\",\n      DATE: \"Дата\",\n    }\n    return types[type] || type\n  }\n\n  // Функция для фильтрации вопросов по поисковому запросу\n  const getFilteredQuestions = () => {\n    if (!searchTerm.trim()) return questions\n\n    return questions.filter(question => {\n      const searchLower = searchTerm.toLowerCase()\n      return (\n        question.text.toLowerCase().includes(searchLower) ||\n        (question.category &&\n          question.category.toLowerCase().includes(searchLower)) ||\n        getQuestionTypeLabel(question.type).toLowerCase().includes(searchLower)\n      )\n    })\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <Sidebar user={currentUser} />\n      <div className=\"dashboard-content\">\n        <div className=\"questions-header\">\n          <h1>База вопросов</h1>\n          <button className=\"btn-add-question\" onClick={openAddModal}>\n            Добавить вопрос\n          </button>\n        </div>\n\n        {error && <div className=\"error-message\">{error}</div>}\n\n        {loading ? (\n          <div className=\"loading-spinner\">Загрузка...</div>\n        ) : (\n          <div className=\"questions-list\">\n            <table>\n              <thead>\n                <tr>\n                  <th>№</th>\n                  <th>Текст вопроса</th>\n                  <th>Тип</th>\n                  <th>Категория</th>\n                  <th>Обязательный</th>\n                  {/* <th>Кол-во вариантов</th> */}\n                  <th>Действия</th>\n                </tr>\n              </thead>\n              <tbody>\n                {!Array.isArray(questions) || questions.length === 0 ? (\n                  <tr>\n                    <td colSpan=\"7\" className=\"no-data\">\n                      Вопросы не найдены\n                    </td>\n                  </tr>\n                ) : (\n                  getFilteredQuestions().map((question, index) => (\n                    <tr key={question.id || index}>\n                      <td>{question.orderNumber || index + 1}</td>\n                      <td>{question.text}</td>\n                      <td>{getQuestionTypeLabel(question.type)}</td>\n                      <td>{question.category || \"Без категории\"}</td>\n                      <td>{question.required ? \"Да\" : \"Нет\"}</td>\n                      {/* <td>\n                        {question.type === \"SINGLE_CHOICE\" ||\n                        question.type === \"MULTIPLE_CHOICE\"\n                          ? question.options?.length || 0\n                          : \"-\"}\n                      </td> */}\n                      <td className=\"actions\">\n                        <button\n                          className=\"btn-edit\"\n                          onClick={() => openEditModal(question)}\n                        >\n                          Редактировать\n                        </button>\n                        <button\n                          className=\"btn-delete\"\n                          onClick={() => handleDeleteQuestion(question.id)}\n                        >\n                          Удалить\n                        </button>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n\n        {/* Модальное окно для добавления/редактирования вопроса */}\n        {isModalOpen && (\n          <div className=\"modal\">\n            <div className=\"modal-content\">\n              <span className=\"close\" onClick={closeModal}>\n                &times;\n              </span>\n              <h2>\n                {currentQuestion\n                  ? \"Редактирование вопроса\"\n                  : \"Добавление вопроса\"}\n              </h2>\n\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"text\">Текст вопроса*:</label>\n                  <textarea\n                    id=\"text\"\n                    name=\"text\"\n                    value={formData.text}\n                    onChange={handleInputChange}\n                    required\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"type\">Тип вопроса*:</label>\n                  <select\n                    id=\"type\"\n                    name=\"type\"\n                    value={formData.type}\n                    onChange={handleInputChange}\n                    required\n                  >\n                    <option value=\"TEXT\">Текстовый</option>\n                    <option value=\"SINGLE_CHOICE\">Одиночный выбор</option>\n                    <option value=\"MULTIPLE_CHOICE\">Множественный выбор</option>\n                    <option value=\"RATING\">Оценка</option>\n                    <option value=\"DATE\">Дата</option>\n                  </select>\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"category\">Категория:</label>\n                  <input\n                    type=\"text\"\n                    id=\"category\"\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleInputChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"orderNumber\">Порядковый номер:</label>\n                  <input\n                    type=\"number\"\n                    id=\"orderNumber\"\n                    name=\"orderNumber\"\n                    value={formData.orderNumber}\n                    onChange={handleInputChange}\n                    min=\"0\"\n                  />\n                </div>\n\n                <div className=\"form-group checkbox\">\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      name=\"required\"\n                      checked={formData.required}\n                      onChange={handleInputChange}\n                    />\n                    Обязательный вопрос\n                  </label>\n                </div>\n\n                {/* Варианты ответов для вопросов с выбором */}\n                {(formData.type === \"SINGLE_CHOICE\" ||\n                  formData.type === \"MULTIPLE_CHOICE\") && (\n                  <div className=\"options-section\">\n                    <h3>Варианты ответов:</h3>\n\n                    {loadingOptions ? (\n                      <div className=\"loading-spinner\">\n                        Загрузка вариантов...\n                      </div>\n                    ) : (\n                      <>\n                        {formData.options.length === 0 ? (\n                          <div className=\"no-options\">Нет вариантов ответа</div>\n                        ) : (\n                          formData.options.map((option, index) => (\n                            <div\n                              key={option.id || index}\n                              className=\"option-row\"\n                            >\n                              <span className=\"option-number\">\n                                {index + 1}.\n                              </span>\n                              <input\n                                type=\"text\"\n                                value={option.text}\n                                onChange={e =>\n                                  handleOptionChange(index, e.target.value)\n                                }\n                                placeholder=\"Текст варианта ответа\"\n                                required\n                              />\n                              <button\n                                type=\"button\"\n                                className=\"btn-remove-option\"\n                                onClick={() => handleRemoveOption(index)}\n                              >\n                                Удалить\n                              </button>\n                            </div>\n                          ))\n                        )}\n\n                        <button\n                          type=\"button\"\n                          className=\"btn-add-option\"\n                          onClick={handleAddOption}\n                        >\n                          Добавить вариант\n                        </button>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                <div className=\"form-actions\">\n                  <button\n                    type=\"submit\"\n                    className=\"btn-save\"\n                    disabled={loadingOptions}\n                  >\n                    Сохранить\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn-cancel\"\n                    onClick={closeModal}\n                  >\n                    Отмена\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default QuestionsPage\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,OAAOC,OAAO,MAAM,iCAAiC;AACrD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACwB,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAM,CAAC0B,cAAc,EAAEC,iBAAiB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC;IACvC8B,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,MAAM;IAAE;IACdC,QAAQ,EAAE,KAAK;IACfC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,CAAC;IACdC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGlC,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMoC,IAAI,GAAGhC,WAAW,CAACiC,cAAc,CAAC,CAAC;IACzC,IAAI,CAACD,IAAI,IAAKA,IAAI,CAACE,IAAI,KAAK,OAAO,IAAIF,IAAI,CAACE,IAAI,KAAK,SAAU,EAAE;MAC/DH,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACF;IACAjB,cAAc,CAACkB,IAAI,CAAC;IAEpBG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACFzB,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM0B,IAAI,GAAG,MAAMtC,gBAAgB,CAACuC,eAAe,CAAC,CAAC;MACrD;MACA7B,YAAY,CAAC8B,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;MAC7CxB,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAO4B,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZ9B,QAAQ,CACN,gCAAgC,IAC7B,EAAA6B,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcL,IAAI,cAAAM,kBAAA,uBAAlBA,kBAAA,CAAoBE,OAAO,KAAIJ,GAAG,CAACI,OAAO,CAC/C,CAAC;MACDC,OAAO,CAAClC,KAAK,CAAC,4BAA4B,EAAE6B,GAAG,CAAC;MAChDhC,YAAY,CAAC,EAAE,CAAC,EAAC;IACnB,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMoC,uBAAuB,GAAG,MAAMC,UAAU,IAAI;IAClD,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;IAE1B,IAAI;MACFzB,iBAAiB,CAAC,IAAI,CAAC;MACvB,MAAMQ,OAAO,GAAG,MAAMhC,gBAAgB,CAACkD,kBAAkB,CAACD,UAAU,CAAC;MACrE,OAAOT,KAAK,CAACC,OAAO,CAACT,OAAO,CAAC,GAAGA,OAAO,GAAG,EAAE;IAC9C,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZK,OAAO,CAAClC,KAAK,CAAC,uCAAuCoC,UAAU,GAAG,EAAEP,GAAG,CAAC;MACxE,OAAO,EAAE;IACX,CAAC,SAAS;MACRlB,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAM2B,YAAY,GAAGA,CAAA,KAAM;IACzB7B,kBAAkB,CAAC,IAAI,CAAC;IACxBI,WAAW,CAAC;MACVC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,KAAK;MACfC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAEtB,SAAS,CAAC2C,MAAM,GAAG,CAAC;MACjCpB,OAAO,EAAE;IACX,CAAC,CAAC;IACFZ,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMiC,aAAa,GAAG,MAAMC,QAAQ,IAAI;IACtChC,kBAAkB,CAACgC,QAAQ,CAAC;IAC5B9B,iBAAiB,CAAC,IAAI,CAAC;;IAEvB;IACA,IAAIQ,OAAO,GAAG,EAAE;IAChB,IACEsB,QAAQ,CAAC1B,IAAI,KAAK,eAAe,IACjC0B,QAAQ,CAAC1B,IAAI,KAAK,iBAAiB,EACnC;MACAI,OAAO,GAAG,MAAMgB,uBAAuB,CAACM,QAAQ,CAACC,EAAE,CAAC;IACtD;IAEA7B,WAAW,CAAC;MACVC,IAAI,EAAE2B,QAAQ,CAAC3B,IAAI;MACnBC,IAAI,EAAE0B,QAAQ,CAAC1B,IAAI;MACnBC,QAAQ,EAAEyB,QAAQ,CAACzB,QAAQ;MAC3BC,QAAQ,EAAEwB,QAAQ,CAACxB,QAAQ,IAAI,EAAE;MACjCC,WAAW,EAAEuB,QAAQ,CAACvB,WAAW,IAAI,CAAC;MACtCC,OAAO,EAAEA,OAAO,CAACoB,MAAM,GAAG,CAAC,GAAGpB,OAAO,GAAGsB,QAAQ,CAACtB,OAAO,IAAI;IAC9D,CAAC,CAAC;IAEFR,iBAAiB,CAAC,KAAK,CAAC;IACxBJ,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMoC,UAAU,GAAGA,CAAA,KAAM;IACvBpC,cAAc,CAAC,KAAK,CAAC;IACrBE,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMmC,iBAAiB,GAAGC,CAAC,IAAI;IAC7B,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEhC,IAAI;MAAEiC;IAAQ,CAAC,GAAGH,CAAC,CAACI,MAAM;;IAE/C;IACA;IACA,IACEH,IAAI,KAAK,MAAM,IACfC,KAAK,KAAK,eAAe,IACzBA,KAAK,KAAK,iBAAiB,EAC3B;MACAlC,WAAW,CAAC;QACV,GAAGD,QAAQ;QACX,CAACkC,IAAI,GAAGC,KAAK;QACb5B,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLN,WAAW,CAAC;QACV,GAAGD,QAAQ;QACX,CAACkC,IAAI,GAAG/B,IAAI,KAAK,UAAU,GAAGiC,OAAO,GAAGD;MAC1C,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMG,eAAe,GAAGA,CAAA,KAAM;IAC5BrC,WAAW,CAAC;MACV,GAAGD,QAAQ;MACXO,OAAO,EAAE,CAAC,GAAGP,QAAQ,CAACO,OAAO,EAAE;QAAEL,IAAI,EAAE;MAAG,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC;EAED,MAAMqC,kBAAkB,GAAGA,CAACC,KAAK,EAAEL,KAAK,KAAK;IAAA,IAAAM,qBAAA;IAC3C,MAAMC,cAAc,GAAG,CAAC,GAAG1C,QAAQ,CAACO,OAAO,CAAC;;IAE5C;IACA,MAAMoC,QAAQ,IAAAF,qBAAA,GAAGC,cAAc,CAACF,KAAK,CAAC,cAAAC,qBAAA,uBAArBA,qBAAA,CAAuBX,EAAE;IAC1CY,cAAc,CAACF,KAAK,CAAC,GAAG;MACtB,IAAIG,QAAQ,GAAG;QAAEb,EAAE,EAAEa;MAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MACrCzC,IAAI,EAAEiC,KAAK;MACX7B,WAAW,EAAEkC,KAAK,GAAG;IACvB,CAAC;IAEDvC,WAAW,CAAC;MACV,GAAGD,QAAQ;MACXO,OAAO,EAAEmC;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAMJ,KAAK,IAAI;IACxC,MAAMjC,OAAO,GAAG,CAAC,GAAGP,QAAQ,CAACO,OAAO,CAAC;IACrC,MAAMsC,cAAc,GAAGtC,OAAO,CAACiC,KAAK,CAAC;;IAErC;IACA;IACA,IAAIK,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEf,EAAE,IAAIlC,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEkC,EAAE,EAAE;MAC7C,IAAI;QACF,MAAMvD,gBAAgB,CAACuE,YAAY,CAACD,cAAc,CAACf,EAAE,CAAC;MACxD,CAAC,CAAC,OAAOb,GAAG,EAAE;QACZK,OAAO,CAAClC,KAAK,CAAC,yBAAyByD,cAAc,CAACf,EAAE,GAAG,EAAEb,GAAG,CAAC;MACnE;IACF;IAEA,MAAMyB,cAAc,GAAGnC,OAAO,CAACwC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKT,KAAK,CAAC;IAC5DvC,WAAW,CAAC;MACV,GAAGD,QAAQ;MACXO,OAAO,EAAEmC;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMQ,YAAY,GAAG,MAAMjB,CAAC,IAAI;IAC9BA,CAAC,CAACkB,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,IAAIC,aAAa;MACjB,MAAMC,YAAY,GAAG;QAAE,GAAGrD;MAAS,CAAC;;MAEpC;MACA,OAAOqD,YAAY,CAAC9C,OAAO;MAE3B,IAAIX,eAAe,EAAE;QACnB;QACAwD,aAAa,GAAG,MAAM7E,gBAAgB,CAAC+E,cAAc,CACnD1D,eAAe,CAACkC,EAAE,EAClBuB,YACF,CAAC;MACH,CAAC,MAAM;QACL;QACAD,aAAa,GAAG,MAAM7E,gBAAgB,CAACgF,cAAc,CAACF,YAAY,CAAC;MACrE;;MAEA;MACA,IACE,CAACrD,QAAQ,CAACG,IAAI,KAAK,eAAe,IAChCH,QAAQ,CAACG,IAAI,KAAK,iBAAiB,KACrCiD,aAAa,IACbA,aAAa,CAACtB,EAAE,EAChB;QACA;QACA,KAAK,MAAM0B,MAAM,IAAIxD,QAAQ,CAACO,OAAO,EAAE;UACrC,IAAI;YACF,MAAMkD,UAAU,GAAG;cACjBvD,IAAI,EAAEsD,MAAM,CAACtD,IAAI;cACjBI,WAAW,EAAEkD,MAAM,CAAClD,WAAW,IAAI;YACrC,CAAC;YAED,IAAIkD,MAAM,CAAC1B,EAAE,EAAE;cACb;cACA,MAAMvD,gBAAgB,CAACmF,YAAY,CAACF,MAAM,CAAC1B,EAAE,EAAE2B,UAAU,CAAC;YAC5D,CAAC,MAAM;cACL;cACA,MAAMlF,gBAAgB,CAACoF,YAAY,CAACP,aAAa,CAACtB,EAAE,EAAE2B,UAAU,CAAC;YACnE;UACF,CAAC,CAAC,OAAOxC,GAAG,EAAE;YACZK,OAAO,CAAClC,KAAK,CAAC,sBAAsB,EAAE6B,GAAG,CAAC;UAC5C;QACF;MACF;MAEAc,UAAU,CAAC,CAAC;MACZnB,cAAc,CAAC,CAAC,EAAC;IACnB,CAAC,CAAC,OAAOK,GAAG,EAAE;MAAA,IAAA2C,cAAA,EAAAC,mBAAA;MACZxE,QAAQ,CACN,iCAAiC,IAC9B,EAAAuE,cAAA,GAAA3C,GAAG,CAACG,QAAQ,cAAAwC,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAc/C,IAAI,cAAAgD,mBAAA,uBAAlBA,mBAAA,CAAoBxC,OAAO,KAAIJ,GAAG,CAACI,OAAO,CAC/C,CAAC;MACDC,OAAO,CAAClC,KAAK,CAAC,0BAA0B,EAAE6B,GAAG,CAAC;IAChD;EACF,CAAC;EAED,MAAM6C,oBAAoB,GAAG,MAAMhC,EAAE,IAAI;IACvC,IAAIiC,MAAM,CAACC,OAAO,CAAC,6CAA6C,CAAC,EAAE;MACjE,IAAI;QACF,MAAMzF,gBAAgB,CAAC0F,cAAc,CAACnC,EAAE,CAAC;QACzClB,cAAc,CAAC,CAAC,EAAC;MACnB,CAAC,CAAC,OAAOK,GAAG,EAAE;QAAA,IAAAiD,cAAA,EAAAC,mBAAA;QACZ9E,QAAQ,CACN,+BAA+B,IAC5B,EAAA6E,cAAA,GAAAjD,GAAG,CAACG,QAAQ,cAAA8C,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcrD,IAAI,cAAAsD,mBAAA,uBAAlBA,mBAAA,CAAoB9C,OAAO,KAAIJ,GAAG,CAACI,OAAO,CAC/C,CAAC;QACDC,OAAO,CAAClC,KAAK,CAAC,4BAA4B,EAAE6B,GAAG,CAAC;MAClD;IACF;EACF,CAAC;;EAED;EACA,MAAMmD,oBAAoB,GAAGjE,IAAI,IAAI;IACnC,MAAMkE,KAAK,GAAG;MACZC,IAAI,EAAE,WAAW;MACjBC,eAAe,EAAE,qBAAqB;MACtCC,aAAa,EAAE,iBAAiB;MAChCC,MAAM,EAAE,QAAQ;MAChBC,IAAI,EAAE;IACR,CAAC;IACD,OAAOL,KAAK,CAAClE,IAAI,CAAC,IAAIA,IAAI;EAC5B,CAAC;;EAED;EACA,MAAMwE,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAACnF,UAAU,CAACoF,IAAI,CAAC,CAAC,EAAE,OAAO5F,SAAS;IAExC,OAAOA,SAAS,CAAC+D,MAAM,CAAClB,QAAQ,IAAI;MAClC,MAAMgD,WAAW,GAAGrF,UAAU,CAACsF,WAAW,CAAC,CAAC;MAC5C,OACEjD,QAAQ,CAAC3B,IAAI,CAAC4E,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC,IAChDhD,QAAQ,CAACxB,QAAQ,IAChBwB,QAAQ,CAACxB,QAAQ,CAACyE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAE,IACxDT,oBAAoB,CAACvC,QAAQ,CAAC1B,IAAI,CAAC,CAAC2E,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC;IAE3E,CAAC,CAAC;EACJ,CAAC;EAED,oBACElG,OAAA;IAAKqG,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCtG,OAAA,CAACH,OAAO;MAACiC,IAAI,EAAEnB;IAAY;MAAA4F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9B1G,OAAA;MAAKqG,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCtG,OAAA;QAAKqG,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BtG,OAAA;UAAAsG,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtB1G,OAAA;UAAQqG,SAAS,EAAC,kBAAkB;UAACM,OAAO,EAAE5D,YAAa;UAAAuD,QAAA,EAAC;QAE5D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,EAELjG,KAAK,iBAAIT,OAAA;QAAKqG,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAE7F;MAAK;QAAA8F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAErDnG,OAAO,gBACNP,OAAA;QAAKqG,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAElD1G,OAAA;QAAKqG,SAAS,EAAC,gBAAgB;QAAAC,QAAA,eAC7BtG,OAAA;UAAAsG,QAAA,gBACEtG,OAAA;YAAAsG,QAAA,eACEtG,OAAA;cAAAsG,QAAA,gBACEtG,OAAA;gBAAAsG,QAAA,EAAI;cAAC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACV1G,OAAA;gBAAAsG,QAAA,EAAI;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACtB1G,OAAA;gBAAAsG,QAAA,EAAI;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACZ1G,OAAA;gBAAAsG,QAAA,EAAI;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAClB1G,OAAA;gBAAAsG,QAAA,EAAI;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAErB1G,OAAA;gBAAAsG,QAAA,EAAI;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACf;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR1G,OAAA;YAAAsG,QAAA,EACG,CAAClE,KAAK,CAACC,OAAO,CAAChC,SAAS,CAAC,IAAIA,SAAS,CAAC2C,MAAM,KAAK,CAAC,gBAClDhD,OAAA;cAAAsG,QAAA,eACEtG,OAAA;gBAAI4G,OAAO,EAAC,GAAG;gBAACP,SAAS,EAAC,SAAS;gBAAAC,QAAA,EAAC;cAEpC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,GAELV,oBAAoB,CAAC,CAAC,CAACa,GAAG,CAAC,CAAC3D,QAAQ,EAAEW,KAAK,kBACzC7D,OAAA;cAAAsG,QAAA,gBACEtG,OAAA;gBAAAsG,QAAA,EAAKpD,QAAQ,CAACvB,WAAW,IAAIkC,KAAK,GAAG;cAAC;gBAAA0C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC5C1G,OAAA;gBAAAsG,QAAA,EAAKpD,QAAQ,CAAC3B;cAAI;gBAAAgF,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACxB1G,OAAA;gBAAAsG,QAAA,EAAKb,oBAAoB,CAACvC,QAAQ,CAAC1B,IAAI;cAAC;gBAAA+E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC9C1G,OAAA;gBAAAsG,QAAA,EAAKpD,QAAQ,CAACxB,QAAQ,IAAI;cAAe;gBAAA6E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC/C1G,OAAA;gBAAAsG,QAAA,EAAKpD,QAAQ,CAACzB,QAAQ,GAAG,IAAI,GAAG;cAAK;gBAAA8E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAO3C1G,OAAA;gBAAIqG,SAAS,EAAC,SAAS;gBAAAC,QAAA,gBACrBtG,OAAA;kBACEqG,SAAS,EAAC,UAAU;kBACpBM,OAAO,EAAEA,CAAA,KAAM1D,aAAa,CAACC,QAAQ,CAAE;kBAAAoD,QAAA,EACxC;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACT1G,OAAA;kBACEqG,SAAS,EAAC,YAAY;kBACtBM,OAAO,EAAEA,CAAA,KAAMxB,oBAAoB,CAACjC,QAAQ,CAACC,EAAE,CAAE;kBAAAmD,QAAA,EAClD;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACP,CAAC;YAAA,GAzBExD,QAAQ,CAACC,EAAE,IAAIU,KAAK;cAAA0C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA0BzB,CACL;UACF;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACN,EAGA3F,WAAW,iBACVf,OAAA;QAAKqG,SAAS,EAAC,OAAO;QAAAC,QAAA,eACpBtG,OAAA;UAAKqG,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BtG,OAAA;YAAMqG,SAAS,EAAC,OAAO;YAACM,OAAO,EAAEvD,UAAW;YAAAkD,QAAA,EAAC;UAE7C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACP1G,OAAA;YAAAsG,QAAA,EACGrF,eAAe,GACZ,wBAAwB,GACxB;UAAoB;YAAAsF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC,eAEL1G,OAAA;YAAM8G,QAAQ,EAAEvC,YAAa;YAAA+B,QAAA,gBAC3BtG,OAAA;cAAKqG,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBtG,OAAA;gBAAO+G,OAAO,EAAC,MAAM;gBAAAT,QAAA,EAAC;cAAe;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC7C1G,OAAA;gBACEmD,EAAE,EAAC,MAAM;gBACTI,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEnC,QAAQ,CAACE,IAAK;gBACrByF,QAAQ,EAAE3D,iBAAkB;gBAC5B5B,QAAQ;cAAA;gBAAA8E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eAEN1G,OAAA;cAAKqG,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBtG,OAAA;gBAAO+G,OAAO,EAAC,MAAM;gBAAAT,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC3C1G,OAAA;gBACEmD,EAAE,EAAC,MAAM;gBACTI,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEnC,QAAQ,CAACG,IAAK;gBACrBwF,QAAQ,EAAE3D,iBAAkB;gBAC5B5B,QAAQ;gBAAA6E,QAAA,gBAERtG,OAAA;kBAAQwD,KAAK,EAAC,MAAM;kBAAA8C,QAAA,EAAC;gBAAS;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACvC1G,OAAA;kBAAQwD,KAAK,EAAC,eAAe;kBAAA8C,QAAA,EAAC;gBAAe;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACtD1G,OAAA;kBAAQwD,KAAK,EAAC,iBAAiB;kBAAA8C,QAAA,EAAC;gBAAmB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eAC5D1G,OAAA;kBAAQwD,KAAK,EAAC,QAAQ;kBAAA8C,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,eACtC1G,OAAA;kBAAQwD,KAAK,EAAC,MAAM;kBAAA8C,QAAA,EAAC;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC5B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,eAEN1G,OAAA;cAAKqG,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBtG,OAAA;gBAAO+G,OAAO,EAAC,UAAU;gBAAAT,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC5C1G,OAAA;gBACEwB,IAAI,EAAC,MAAM;gBACX2B,EAAE,EAAC,UAAU;gBACbI,IAAI,EAAC,UAAU;gBACfC,KAAK,EAAEnC,QAAQ,CAACK,QAAS;gBACzBsF,QAAQ,EAAE3D;cAAkB;gBAAAkD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eAEN1G,OAAA;cAAKqG,SAAS,EAAC,YAAY;cAAAC,QAAA,gBACzBtG,OAAA;gBAAO+G,OAAO,EAAC,aAAa;gBAAAT,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACtD1G,OAAA;gBACEwB,IAAI,EAAC,QAAQ;gBACb2B,EAAE,EAAC,aAAa;gBAChBI,IAAI,EAAC,aAAa;gBAClBC,KAAK,EAAEnC,QAAQ,CAACM,WAAY;gBAC5BqF,QAAQ,EAAE3D,iBAAkB;gBAC5B4D,GAAG,EAAC;cAAG;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACR,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC,eAEN1G,OAAA;cAAKqG,SAAS,EAAC,qBAAqB;cAAAC,QAAA,eAClCtG,OAAA;gBAAAsG,QAAA,gBACEtG,OAAA;kBACEwB,IAAI,EAAC,UAAU;kBACf+B,IAAI,EAAC,UAAU;kBACfE,OAAO,EAAEpC,QAAQ,CAACI,QAAS;kBAC3BuF,QAAQ,EAAE3D;gBAAkB;kBAAAkD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7B,CAAC,iHAEJ;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL,CAAC,EAGL,CAACrF,QAAQ,CAACG,IAAI,KAAK,eAAe,IACjCH,QAAQ,CAACG,IAAI,KAAK,iBAAiB,kBACnCxB,OAAA;cAAKqG,SAAS,EAAC,iBAAiB;cAAAC,QAAA,gBAC9BtG,OAAA;gBAAAsG,QAAA,EAAI;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAEzBvF,cAAc,gBACbnB,OAAA;gBAAKqG,SAAS,EAAC,iBAAiB;gBAAAC,QAAA,EAAC;cAEjC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,gBAEN1G,OAAA,CAAAE,SAAA;gBAAAoG,QAAA,GACGjF,QAAQ,CAACO,OAAO,CAACoB,MAAM,KAAK,CAAC,gBAC5BhD,OAAA;kBAAKqG,SAAS,EAAC,YAAY;kBAAAC,QAAA,EAAC;gBAAoB;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,GAEtDrF,QAAQ,CAACO,OAAO,CAACiF,GAAG,CAAC,CAAChC,MAAM,EAAEhB,KAAK,kBACjC7D,OAAA;kBAEEqG,SAAS,EAAC,YAAY;kBAAAC,QAAA,gBAEtBtG,OAAA;oBAAMqG,SAAS,EAAC,eAAe;oBAAAC,QAAA,GAC5BzC,KAAK,GAAG,CAAC,EAAC,GACb;kBAAA;oBAAA0C,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM,CAAC,eACP1G,OAAA;oBACEwB,IAAI,EAAC,MAAM;oBACXgC,KAAK,EAAEqB,MAAM,CAACtD,IAAK;oBACnByF,QAAQ,EAAE1D,CAAC,IACTM,kBAAkB,CAACC,KAAK,EAAEP,CAAC,CAACI,MAAM,CAACF,KAAK,CACzC;oBACD0D,WAAW,EAAC,sHAAuB;oBACnCzF,QAAQ;kBAAA;oBAAA8E,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACT,CAAC,eACF1G,OAAA;oBACEwB,IAAI,EAAC,QAAQ;oBACb6E,SAAS,EAAC,mBAAmB;oBAC7BM,OAAO,EAAEA,CAAA,KAAM1C,kBAAkB,CAACJ,KAAK,CAAE;oBAAAyC,QAAA,EAC1C;kBAED;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA,GArBJ7B,MAAM,CAAC1B,EAAE,IAAIU,KAAK;kBAAA0C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAsBpB,CACN,CACF,eAED1G,OAAA;kBACEwB,IAAI,EAAC,QAAQ;kBACb6E,SAAS,EAAC,gBAAgB;kBAC1BM,OAAO,EAAEhD,eAAgB;kBAAA2C,QAAA,EAC1B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA,eACT,CACH;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CACN,eAED1G,OAAA;cAAKqG,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3BtG,OAAA;gBACEwB,IAAI,EAAC,QAAQ;gBACb6E,SAAS,EAAC,UAAU;gBACpBc,QAAQ,EAAEhG,cAAe;gBAAAmF,QAAA,EAC1B;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACT1G,OAAA;gBACEwB,IAAI,EAAC,QAAQ;gBACb6E,SAAS,EAAC,YAAY;gBACtBM,OAAO,EAAEvD,UAAW;gBAAAkD,QAAA,EACrB;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAAtG,EAAA,CAjgBKD,aAAa;EAAA,QAwBAR,WAAW;AAAA;AAAAyH,EAAA,GAxBxBjH,aAAa;AAmgBnB,eAAeA,aAAa;AAAA,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}