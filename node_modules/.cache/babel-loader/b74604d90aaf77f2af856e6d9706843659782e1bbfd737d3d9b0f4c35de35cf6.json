{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api\";\n\n// Стандартные значения для фильтров (используются напрямую, без запроса к API)\nconst FILTER_OPTIONS = {\n  ageGroups: [{\n    value: \"AGE_UNDER_18\",\n    label: \"До 18 лет\"\n  }, {\n    value: \"AGE_18_24\",\n    label: \"18-24 года\"\n  }, {\n    value: \"AGE_25_34\",\n    label: \"25-34 года\"\n  }, {\n    value: \"AGE_35_44\",\n    label: \"35-44 года\"\n  }, {\n    value: \"AGE_45_54\",\n    label: \"45-54 года\"\n  }, {\n    value: \"AGE_55_PLUS\",\n    label: \"55+ лет\"\n  }],\n  genders: [{\n    value: \"MALE\",\n    label: \"Мужской\"\n  }, {\n    value: \"FEMALE\",\n    label: \"Женский\"\n  }, {\n    value: \"OTHER\",\n    label: \"Другой\"\n  }],\n  professions: [{\n    value: \"Программист\",\n    label: \"Программист\"\n  }, {\n    value: \"Дизайнер\",\n    label: \"Дизайнер\"\n  }, {\n    value: \"Менеджер\",\n    label: \"Менеджер\"\n  }, {\n    value: \"Инженер\",\n    label: \"Инженер\"\n  }, {\n    value: \"Врач\",\n    label: \"Врач\"\n  }, {\n    value: \"Учитель\",\n    label: \"Учитель\"\n  }, {\n    value: \"Другое\",\n    label: \"Другое\"\n  }]\n};\nexport const clientsService = {\n  // Получение всех клиентов с их ответами\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error);\n      throw error;\n    }\n  },\n  // Получение клиента по ID - используем клиентов, полученных из getAllClients\n  async getClientById(id, allClients = []) {\n    // Если у нас есть все клиенты, ищем по id\n    if (allClients.length > 0) {\n      const client = allClients.find(c => c.id === id);\n      if (client) return client;\n    }\n\n    // Иначе делаем запрос\n    try {\n      const response = await this.getClientsWithAnswers();\n      return response.find(c => c.id === id);\n    } catch (error) {\n      console.error(`Error fetching client with id ${id}:`, error);\n      throw error;\n    }\n  },\n  // Фильтрация клиентов на стороне клиента\n  async getFilteredClients(filters, allClients = []) {\n    try {\n      // Если клиенты не переданы, получаем их с сервера\n      let clients = allClients;\n      if (clients.length === 0) {\n        clients = await this.getClientsWithAnswers();\n      }\n\n      // Фильтруем клиентов по заданным критериям\n      return clients.filter(client => {\n        // Проверяем соответствие всем фильтрам\n        for (const [key, value] of Object.entries(filters)) {\n          if (!value) continue; // Пропускаем пустые фильтры\n\n          // Фильтр по возрастной группе\n          if (key === \"ageGroup\" && client.ageGroup !== value) {\n            return false;\n          }\n\n          // Фильтр по полу\n          if (key === \"gender\" && client.gender !== value) {\n            return false;\n          }\n\n          // Фильтр по профессии\n          if (key === \"profession\" && client.profession !== value) {\n            return false;\n          }\n        }\n        return true; // Клиент прошел все фильтры\n      });\n    } catch (error) {\n      console.error(\"Error filtering clients:\", error);\n      throw error;\n    }\n  },\n  // Получение доступных значений для фильтров - возвращаем заранее определенные значения\n  getFilterOptions() {\n    return FILTER_OPTIONS;\n  }\n};","map":{"version":3,"names":["axios","API_URL","FILTER_OPTIONS","ageGroups","value","label","genders","professions","clientsService","getClientsWithAnswers","response","get","data","error","console","getClientById","id","allClients","length","client","find","c","getFilteredClients","filters","clients","filter","key","Object","entries","ageGroup","gender","profession","getFilterOptions"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/clients.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_URL = \"http://localhost:8080/api\"\n\n// Стандартные значения для фильтров (используются напрямую, без запроса к API)\nconst FILTER_OPTIONS = {\n  ageGroups: [\n    { value: \"AGE_UNDER_18\", label: \"До 18 лет\" },\n    { value: \"AGE_18_24\", label: \"18-24 года\" },\n    { value: \"AGE_25_34\", label: \"25-34 года\" },\n    { value: \"AGE_35_44\", label: \"35-44 года\" },\n    { value: \"AGE_45_54\", label: \"45-54 года\" },\n    { value: \"AGE_55_PLUS\", label: \"55+ лет\" },\n  ],\n  genders: [\n    { value: \"MALE\", label: \"Мужской\" },\n    { value: \"FEMALE\", label: \"Женский\" },\n    { value: \"OTHER\", label: \"Другой\" },\n  ],\n  professions: [\n    { value: \"Программист\", label: \"Программист\" },\n    { value: \"Дизайнер\", label: \"Дизайнер\" },\n    { value: \"Менеджер\", label: \"Менеджер\" },\n    { value: \"Инженер\", label: \"Инженер\" },\n    { value: \"Врач\", label: \"Врач\" },\n    { value: \"Учитель\", label: \"Учитель\" },\n    { value: \"Другое\", label: \"Другое\" },\n  ],\n}\n\nexport const clientsService = {\n  // Получение всех клиентов с их ответами\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`)\n      return response.data\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error)\n      throw error\n    }\n  },\n\n  // Получение клиента по ID - используем клиентов, полученных из getAllClients\n  async getClientById(id, allClients = []) {\n    // Если у нас есть все клиенты, ищем по id\n    if (allClients.length > 0) {\n      const client = allClients.find(c => c.id === id)\n      if (client) return client\n    }\n\n    // Иначе делаем запрос\n    try {\n      const response = await this.getClientsWithAnswers()\n      return response.find(c => c.id === id)\n    } catch (error) {\n      console.error(`Error fetching client with id ${id}:`, error)\n      throw error\n    }\n  },\n\n  // Фильтрация клиентов на стороне клиента\n  async getFilteredClients(filters, allClients = []) {\n    try {\n      // Если клиенты не переданы, получаем их с сервера\n      let clients = allClients\n      if (clients.length === 0) {\n        clients = await this.getClientsWithAnswers()\n      }\n\n      // Фильтруем клиентов по заданным критериям\n      return clients.filter(client => {\n        // Проверяем соответствие всем фильтрам\n        for (const [key, value] of Object.entries(filters)) {\n          if (!value) continue // Пропускаем пустые фильтры\n\n          // Фильтр по возрастной группе\n          if (key === \"ageGroup\" && client.ageGroup !== value) {\n            return false\n          }\n\n          // Фильтр по полу\n          if (key === \"gender\" && client.gender !== value) {\n            return false\n          }\n\n          // Фильтр по профессии\n          if (key === \"profession\" && client.profession !== value) {\n            return false\n          }\n        }\n\n        return true // Клиент прошел все фильтры\n      })\n    } catch (error) {\n      console.error(\"Error filtering clients:\", error)\n      throw error\n    }\n  },\n\n  // Получение доступных значений для фильтров - возвращаем заранее определенные значения\n  getFilterOptions() {\n    return FILTER_OPTIONS\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}