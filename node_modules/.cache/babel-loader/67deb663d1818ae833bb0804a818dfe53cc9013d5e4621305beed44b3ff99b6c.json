{"ast":null,"code":"import axios from \"axios\";\n\n// Базовый URL API (настройте в соответствии с вашим бэкендом)\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:3001/api\";\n\n/**\n * Сервис для работы с опросниками\n */\nexport const surveyService = {\n  /**\n   * Создать новый опросник\n   * @param {Object} surveyData - данные опросника\n   * @returns {Promise<Object>} - созданный опросник\n   */\n  createSurvey: async surveyData => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.post(`${API_URL}/surveys`, surveyData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error);\n      throw error;\n    }\n  },\n  /**\n   * Получить все опросники пользователя\n   * @returns {Promise<Array>} - список опросников\n   */\n  getUserSurveys: async () => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.get(`${API_URL}/surveys`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error);\n      throw error;\n    }\n  },\n  /**\n   * Получить опросник по ID\n   * @param {string} surveyId - ID опросника\n   * @returns {Promise<Object>} - данные опросника\n   */\n  getSurveyById: async surveyId => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.get(`${API_URL}/surveys/${surveyId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${surveyId}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Обновить опросник\n   * @param {string} surveyId - ID опросника\n   * @param {Object} surveyData - новые данные опросника\n   * @returns {Promise<Object>} - обновленный опросник\n   */\n  updateSurvey: async (surveyId, surveyData) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await axios.put(`${API_URL}/surveys/${surveyId}`, surveyData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${surveyId}:`, error);\n      throw error;\n    }\n  },\n  /**\n   * Удалить опросник\n   * @param {string} surveyId - ID опросника\n   * @returns {Promise<void>}\n   */\n  deleteSurvey: async surveyId => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      await axios.delete(`${API_URL}/surveys/${surveyId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${surveyId}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","surveyService","createSurvey","surveyData","token","localStorage","getItem","response","post","headers","Authorization","data","error","console","getUserSurveys","get","getSurveyById","surveyId","updateSurvey","put","deleteSurvey","delete"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/surveys.js"],"sourcesContent":["import axios from \"axios\"\n\n// Базовый URL API (настройте в соответствии с вашим бэкендом)\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:3001/api\"\n\n/**\n * Сервис для работы с опросниками\n */\nexport const surveyService = {\n  /**\n   * Создать новый опросник\n   * @param {Object} surveyData - данные опросника\n   * @returns {Promise<Object>} - созданный опросник\n   */\n  createSurvey: async surveyData => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      const response = await axios.post(`${API_URL}/surveys`, surveyData, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error)\n      throw error\n    }\n  },\n\n  /**\n   * Получить все опросники пользователя\n   * @returns {Promise<Array>} - список опросников\n   */\n  getUserSurveys: async () => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      const response = await axios.get(`${API_URL}/surveys`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error)\n      throw error\n    }\n  },\n\n  /**\n   * Получить опросник по ID\n   * @param {string} surveyId - ID опросника\n   * @returns {Promise<Object>} - данные опросника\n   */\n  getSurveyById: async surveyId => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      const response = await axios.get(`${API_URL}/surveys/${surveyId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${surveyId}:`, error)\n      throw error\n    }\n  },\n\n  /**\n   * Обновить опросник\n   * @param {string} surveyId - ID опросника\n   * @param {Object} surveyData - новые данные опросника\n   * @returns {Promise<Object>} - обновленный опросник\n   */\n  updateSurvey: async (surveyId, surveyData) => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      const response = await axios.put(\n        `${API_URL}/surveys/${surveyId}`,\n        surveyData,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${surveyId}:`, error)\n      throw error\n    }\n  },\n\n  /**\n   * Удалить опросник\n   * @param {string} surveyId - ID опросника\n   * @returns {Promise<void>}\n   */\n  deleteSurvey: async surveyId => {\n    try {\n      const token = localStorage.getItem(\"token\")\n      await axios.delete(`${API_URL}/surveys/${surveyId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${surveyId}:`, error)\n      throw error\n    }\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}