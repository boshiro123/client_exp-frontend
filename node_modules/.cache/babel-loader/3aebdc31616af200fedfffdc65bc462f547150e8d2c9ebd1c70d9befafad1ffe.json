{"ast":null,"code":"// Мок-сервис для работы с опросниками (для разработки без сервера)\nconst STORAGE_KEY = \"mock_surveys\";\n\n/**\n * Генерирует уникальный ID для опросника\n */\nconst generateId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\n\n/**\n * Получает все опросники из localStorage\n */\nconst getSurveysFromStorage = () => {\n  const surveys = localStorage.getItem(STORAGE_KEY);\n  return surveys ? JSON.parse(surveys) : [];\n};\n\n/**\n * Сохраняет опросники в localStorage\n */\nconst saveSurveysToStorage = surveys => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(surveys));\n};\n\n/**\n * Метод для имитации задержки сети\n */\nconst delay = (ms = 300) => new Promise(resolve => setTimeout(resolve, ms));\nclass MockSurveyService {\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    await delay();\n    const surveys = getSurveysFromStorage();\n    const newSurvey = {\n      ...surveyData,\n      id: generateId(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    surveys.push(newSurvey);\n    saveSurveysToStorage(surveys);\n    return newSurvey;\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    await delay();\n    return getSurveysFromStorage();\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    await delay();\n    const surveys = getSurveysFromStorage();\n    const survey = surveys.find(s => s.id === id);\n    if (!survey) {\n      throw new Error(\"Опросник не найден\");\n    }\n    return survey;\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    await delay();\n    const surveys = getSurveysFromStorage();\n    const index = surveys.findIndex(s => s.id === id);\n    if (index === -1) {\n      throw new Error(\"Опросник не найден\");\n    }\n    const updatedSurvey = {\n      ...surveys[index],\n      ...surveyData,\n      id,\n      updatedAt: new Date().toISOString()\n    };\n    surveys[index] = updatedSurvey;\n    saveSurveysToStorage(surveys);\n    return updatedSurvey;\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    await delay();\n    const surveys = getSurveysFromStorage();\n    const updatedSurveys = surveys.filter(s => s.id !== id);\n    if (surveys.length === updatedSurveys.length) {\n      throw new Error(\"Опросник не найден\");\n    }\n    saveSurveysToStorage(updatedSurveys);\n    return {\n      success: true,\n      message: \"Опросник успешно удален\"\n    };\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    await delay();\n    const surveys = getSurveysFromStorage();\n    const index = surveys.findIndex(s => s.id === id);\n    if (index === -1) {\n      throw new Error(\"Опросник не найден\");\n    }\n    surveys[index] = {\n      ...surveys[index],\n      status,\n      updatedAt: new Date().toISOString()\n    };\n    saveSurveysToStorage(surveys);\n    return surveys[index];\n  }\n}\nexport const mockSurveyService = new MockSurveyService();","map":{"version":3,"names":["STORAGE_KEY","generateId","Date","now","toString","Math","random","substr","getSurveysFromStorage","surveys","localStorage","getItem","JSON","parse","saveSurveysToStorage","setItem","stringify","delay","ms","Promise","resolve","setTimeout","MockSurveyService","createSurvey","surveyData","newSurvey","id","createdAt","toISOString","updatedAt","push","getAllSurveys","getSurveyById","survey","find","s","Error","updateSurvey","index","findIndex","updatedSurvey","deleteSurvey","updatedSurveys","filter","length","success","message","changeSurveyStatus","status","mockSurveyService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/mock-survey-service.js"],"sourcesContent":["// Мок-сервис для работы с опросниками (для разработки без сервера)\nconst STORAGE_KEY = \"mock_surveys\"\n\n/**\n * Генерирует уникальный ID для опросника\n */\nconst generateId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2)\n}\n\n/**\n * Получает все опросники из localStorage\n */\nconst getSurveysFromStorage = () => {\n  const surveys = localStorage.getItem(STORAGE_KEY)\n  return surveys ? JSON.parse(surveys) : []\n}\n\n/**\n * Сохраняет опросники в localStorage\n */\nconst saveSurveysToStorage = surveys => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(surveys))\n}\n\n/**\n * Метод для имитации задержки сети\n */\nconst delay = (ms = 300) => new Promise(resolve => setTimeout(resolve, ms))\n\nclass MockSurveyService {\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    await delay()\n\n    const surveys = getSurveysFromStorage()\n\n    const newSurvey = {\n      ...surveyData,\n      id: generateId(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    }\n\n    surveys.push(newSurvey)\n    saveSurveysToStorage(surveys)\n\n    return newSurvey\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    await delay()\n    return getSurveysFromStorage()\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    await delay()\n\n    const surveys = getSurveysFromStorage()\n    const survey = surveys.find(s => s.id === id)\n\n    if (!survey) {\n      throw new Error(\"Опросник не найден\")\n    }\n\n    return survey\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    await delay()\n\n    const surveys = getSurveysFromStorage()\n    const index = surveys.findIndex(s => s.id === id)\n\n    if (index === -1) {\n      throw new Error(\"Опросник не найден\")\n    }\n\n    const updatedSurvey = {\n      ...surveys[index],\n      ...surveyData,\n      id,\n      updatedAt: new Date().toISOString(),\n    }\n\n    surveys[index] = updatedSurvey\n    saveSurveysToStorage(surveys)\n\n    return updatedSurvey\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    await delay()\n\n    const surveys = getSurveysFromStorage()\n    const updatedSurveys = surveys.filter(s => s.id !== id)\n\n    if (surveys.length === updatedSurveys.length) {\n      throw new Error(\"Опросник не найден\")\n    }\n\n    saveSurveysToStorage(updatedSurveys)\n\n    return { success: true, message: \"Опросник успешно удален\" }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    await delay()\n\n    const surveys = getSurveysFromStorage()\n    const index = surveys.findIndex(s => s.id === id)\n\n    if (index === -1) {\n      throw new Error(\"Опросник не найден\")\n    }\n\n    surveys[index] = {\n      ...surveys[index],\n      status,\n      updatedAt: new Date().toISOString(),\n    }\n\n    saveSurveysToStorage(surveys)\n\n    return surveys[index]\n  }\n}\n\nexport const mockSurveyService = new MockSurveyService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}