{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./auth\";\nconst API_URL = \"http://localhost:8080/api/distribution\";\nclass DistributionService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL\n    });\n\n    // Добавляем интерцептор для запросов\n    this.api.interceptors.request.use(config => {\n      const token = authService.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Рассылка опросника клиентам\n   * @param {Object} options - параметры рассылки\n   * @param {number} options.surveyId - ID опросника для рассылки\n   * @param {string} [options.subject] - тема письма (необязательный параметр)\n   * @returns {Promise<Object>} результат отправки\n   */\n  async sendSurveyToClients(options) {\n    try {\n      if (!options.surveyId) {\n        throw new Error(\"Не указан ID опросника для рассылки\");\n      }\n      console.log(\"Отправка опросника клиентам:\", JSON.stringify(options, null, 2));\n      const response = await this.api.post(\"/survey\", {\n        surveyId: options.surveyId,\n        subject: options.subject || \"Приглашение пройти опрос\"\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при рассылке опросника клиентам:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Отправка тематического письма клиентам\n   * @param {Object} options - параметры сообщения\n   * @param {string} options.message - текст сообщения\n   * @param {string} [options.subject] - тема письма (необязательный параметр)\n   * @returns {Promise<Object>} результат отправки\n   */\n  async sendMessageToClients(options) {\n    try {\n      if (!options.message) {\n        throw new Error(\"Не указан текст сообщения для отправки\");\n      }\n      console.log(\"Отправка тематического письма клиентам:\", JSON.stringify(options, null, 2));\n      const response = await this.api.post(\"/message\", {\n        message: options.message,\n        subject: options.subject || \"Информация от ClientExp\"\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при отправке тематического письма клиентам:\", error);\n      throw error;\n    }\n  }\n}\nexport const distributionService = new DistributionService();","map":{"version":3,"names":["axios","authService","API_URL","DistributionService","constructor","api","create","baseURL","interceptors","request","use","config","token","getToken","headers","Authorization","error","Promise","reject","sendSurveyToClients","options","surveyId","Error","console","log","JSON","stringify","response","post","subject","data","sendMessageToClients","message","distributionService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/distribution.js"],"sourcesContent":["import axios from \"axios\"\nimport { authService } from \"./auth\"\n\nconst API_URL = \"http://localhost:8080/api/distribution\"\n\nclass DistributionService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n    })\n\n    // Добавляем интерцептор для запросов\n    this.api.interceptors.request.use(\n      config => {\n        const token = authService.getToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      error => {\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  /**\n   * Рассылка опросника клиентам\n   * @param {Object} options - параметры рассылки\n   * @param {number} options.surveyId - ID опросника для рассылки\n   * @param {string} [options.subject] - тема письма (необязательный параметр)\n   * @returns {Promise<Object>} результат отправки\n   */\n  async sendSurveyToClients(options) {\n    try {\n      if (!options.surveyId) {\n        throw new Error(\"Не указан ID опросника для рассылки\")\n      }\n\n      console.log(\n        \"Отправка опросника клиентам:\",\n        JSON.stringify(options, null, 2)\n      )\n\n      const response = await this.api.post(\"/survey\", {\n        surveyId: options.surveyId,\n        subject: options.subject || \"Приглашение пройти опрос\",\n      })\n\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при рассылке опросника клиентам:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * Отправка тематического письма клиентам\n   * @param {Object} options - параметры сообщения\n   * @param {string} options.message - текст сообщения\n   * @param {string} [options.subject] - тема письма (необязательный параметр)\n   * @returns {Promise<Object>} результат отправки\n   */\n  async sendMessageToClients(options) {\n    try {\n      if (!options.message) {\n        throw new Error(\"Не указан текст сообщения для отправки\")\n      }\n\n      console.log(\n        \"Отправка тематического письма клиентам:\",\n        JSON.stringify(options, null, 2)\n      )\n\n      const response = await this.api.post(\"/message\", {\n        message: options.message,\n        subject: options.subject || \"Информация от ClientExp\",\n      })\n\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при отправке тематического письма клиентам:\", error)\n      throw error\n    }\n  }\n}\n\nexport const distributionService = new DistributionService()\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,QAAQ;AAEpC,MAAMC,OAAO,GAAG,wCAAwC;AAExD,MAAMC,mBAAmB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;MACtBC,OAAO,EAAEL;IACX,CAAC,CAAC;;IAEF;IACA,IAAI,CAACG,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAI;MACR,MAAMC,KAAK,GAAGX,WAAW,CAACY,QAAQ,CAAC,CAAC;MACpC,IAAID,KAAK,EAAE;QACTD,MAAM,CAACG,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;MAClD;MACA,OAAOD,MAAM;IACf,CAAC,EACDK,KAAK,IAAI;MACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,mBAAmBA,CAACC,OAAO,EAAE;IACjC,IAAI;MACF,IAAI,CAACA,OAAO,CAACC,QAAQ,EAAE;QACrB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;MACxD;MAEAC,OAAO,CAACC,GAAG,CACT,8BAA8B,EAC9BC,IAAI,CAACC,SAAS,CAACN,OAAO,EAAE,IAAI,EAAE,CAAC,CACjC,CAAC;MAED,MAAMO,QAAQ,GAAG,MAAM,IAAI,CAACtB,GAAG,CAACuB,IAAI,CAAC,SAAS,EAAE;QAC9CP,QAAQ,EAAED,OAAO,CAACC,QAAQ;QAC1BQ,OAAO,EAAET,OAAO,CAACS,OAAO,IAAI;MAC9B,CAAC,CAAC;MAEF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMe,oBAAoBA,CAACX,OAAO,EAAE;IAClC,IAAI;MACF,IAAI,CAACA,OAAO,CAACY,OAAO,EAAE;QACpB,MAAM,IAAIV,KAAK,CAAC,wCAAwC,CAAC;MAC3D;MAEAC,OAAO,CAACC,GAAG,CACT,yCAAyC,EACzCC,IAAI,CAACC,SAAS,CAACN,OAAO,EAAE,IAAI,EAAE,CAAC,CACjC,CAAC;MAED,MAAMO,QAAQ,GAAG,MAAM,IAAI,CAACtB,GAAG,CAACuB,IAAI,CAAC,UAAU,EAAE;QAC/CI,OAAO,EAAEZ,OAAO,CAACY,OAAO;QACxBH,OAAO,EAAET,OAAO,CAACS,OAAO,IAAI;MAC9B,CAAC,CAAC;MAEF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMiB,mBAAmB,GAAG,IAAI9B,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}