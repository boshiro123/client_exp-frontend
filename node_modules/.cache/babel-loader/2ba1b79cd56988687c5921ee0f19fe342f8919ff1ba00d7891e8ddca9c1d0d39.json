{"ast":null,"code":"var _jsxFileName = \"/Users/shirokiy/Desktop/Repositories/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u044B/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { authService } from \"../../api/auth\";\n\n/**\n * Компонент для защищенных маршрутов, требующих аутентификации\n * Если пользователь не авторизован, перенаправляет на страницу входа\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  _s();\n  const location = useLocation();\n  const isAuthenticated = authService.isAuthenticated();\n\n  // Если пользователь не авторизован, перенаправляем на страницу входа\n  // с сохранением URL, на который он пытался попасть\n  if (!isAuthenticated) {\n    // Сохраняем путь, чтобы перенаправить пользователя после входа\n    localStorage.setItem(\"redirectAfterLogin\", location.pathname);\n\n    // Перенаправляем на страницу входа\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Если пользователь авторизован, отображаем защищенный маршрут\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","authService","jsxDEV","_jsxDEV","ProtectedRoute","_s","location","isAuthenticated","localStorage","setItem","pathname","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\"\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\"\nimport { authService } from \"../../api/auth\"\n\n/**\n * Компонент для защищенных маршрутов, требующих аутентификации\n * Если пользователь не авторизован, перенаправляет на страницу входа\n */\nconst ProtectedRoute = () => {\n  const location = useLocation()\n  const isAuthenticated = authService.isAuthenticated()\n\n  // Если пользователь не авторизован, перенаправляем на страницу входа\n  // с сохранением URL, на который он пытался попасть\n  if (!isAuthenticated) {\n    // Сохраняем путь, чтобы перенаправить пользователя после входа\n    localStorage.setItem(\"redirectAfterLogin\", location.pathname)\n\n    // Перенаправляем на страницу входа\n    return <Navigate to=\"/login\" state={{ from: location }} replace />\n  }\n\n  // Если пользователь авторизован, отображаем защищенный маршрут\n  return <Outlet />\n}\n\nexport default ProtectedRoute\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,gBAAgB;;AAE5C;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,eAAe,GAAGN,WAAW,CAACM,eAAe,CAAC,CAAC;;EAErD;EACA;EACA,IAAI,CAACA,eAAe,EAAE;IACpB;IACAC,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEH,QAAQ,CAACI,QAAQ,CAAC;;IAE7D;IACA,oBAAOP,OAAA,CAACL,QAAQ;MAACa,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEP;MAAS,CAAE;MAACQ,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,oBAAOf,OAAA,CAACJ,MAAM;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACnB,CAAC;AAAAb,EAAA,CAhBKD,cAAc;EAAA,QACDJ,WAAW;AAAA;AAAAmB,EAAA,GADxBf,cAAc;AAkBpB,eAAeA,cAAc;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}