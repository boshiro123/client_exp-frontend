{"ast":null,"code":"var _jsxFileName = \"/Users/shirokiy/Desktop/Repositories/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u044B/ClientExp/client_exp-frontend/src/pages/Issues/IssuesPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Sidebar from \"../../components/common/Sidebar\";\nimport { authService } from \"../../api/auth\";\nimport { surveyService } from \"../../api/survey\";\nimport \"./IssuesPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IssuesPage = () => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [surveys, setSurveys] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const user = authService.getCurrentUser();\n    if (!user || user.role !== \"ADMIN\" && user.role !== \"MANAGER\") {\n      navigate(\"/login\");\n      return;\n    }\n    setCurrentUser(user);\n\n    // Загрузка опросников и их рейтингов\n    const loadSurveysWithRatings = async () => {\n      try {\n        setLoading(true);\n        // Получаем все опросники\n        const surveysResponse = await surveyService.getAllSurveys();\n\n        // Проверяем формат данных и преобразуем в массив при необходимости\n        let surveysData = [];\n        if (Array.isArray(surveysResponse)) {\n          surveysData = surveysResponse;\n        } else if (surveysResponse && typeof surveysResponse === \"object\") {\n          // Проверяем различные возможные структуры ответа\n          if (Array.isArray(surveysResponse.content)) {\n            surveysData = surveysResponse.content;\n          } else if (Array.isArray(surveysResponse.data)) {\n            surveysData = surveysResponse.data;\n          } else if (Array.isArray(surveysResponse.items)) {\n            surveysData = surveysResponse.items;\n          } else if (Array.isArray(surveysResponse.surveys)) {\n            surveysData = surveysResponse.surveys;\n          } else {\n            console.error(\"Неподдерживаемая структура данных:\", surveysResponse);\n            setError(\"Неподдерживаемый формат данных от API\");\n            setLoading(false);\n            return;\n          }\n        } else {\n          console.error(\"Неподдерживаемый тип данных:\", typeof surveysResponse);\n          setError(\"Некорректный ответ от API\");\n          setLoading(false);\n          return;\n        }\n        console.log(\"Обработанные данные опросников:\", surveysData);\n\n        // Для каждого опросника получаем ответы и вычисляем средний рейтинг\n        const surveysWithRatings = await Promise.all(surveysData.map(async survey => {\n          try {\n            // Получаем ответы на опросник\n            const responsesData = await surveyService.getSurveyResponses(survey.id);\n\n            // Проверяем формат данных ответов\n            let responses = [];\n            if (Array.isArray(responsesData)) {\n              responses = responsesData;\n            } else if (responsesData && typeof responsesData === \"object\") {\n              if (Array.isArray(responsesData.content)) {\n                responses = responsesData.content;\n              } else if (Array.isArray(responsesData.data)) {\n                responses = responsesData.data;\n              } else if (Array.isArray(responsesData.responses)) {\n                responses = responsesData.responses;\n              } else {\n                console.warn(`Неподдерживаемая структура данных ответов для опросника ${survey.id}:`, responsesData);\n                responses = [];\n              }\n            }\n            console.log(`Ответы для опросника ${survey.id}:`, responses);\n\n            // Находим среди ответов те, которые относятся к вопросам типа RATING\n            let ratingSum = 0;\n            let ratingCount = 0;\n\n            // Перебираем все ответы и находим рейтинговые вопросы\n            responses.forEach(response => {\n              // Проверяем различные форматы ответов\n              let answersArray = [];\n              if (response.answers && Array.isArray(response.answers)) {\n                // Стандартный формат с массивом answers\n                answersArray = response.answers;\n              } else if (response.questionAnswers && Array.isArray(response.questionAnswers)) {\n                // Альтернативный формат с questionAnswers\n                answersArray = response.questionAnswers;\n              } else if (Array.isArray(response)) {\n                // Если сам response - это массив ответов\n                answersArray = response;\n              }\n\n              // Обрабатываем массив ответов\n              answersArray.forEach(answer => {\n                // Проверяем различные форматы ответов для определения типа вопроса\n                let isRatingQuestion = false;\n                let ratingValue = null;\n\n                // Вариант 1: Ответ содержит объект question с типом\n                if (answer.question && answer.question.type === \"RATING\") {\n                  isRatingQuestion = true;\n                  ratingValue = answer.value;\n                }\n                // Вариант 2: Тип вопроса указан непосредственно в ответе\n                else if (answer.questionType === \"RATING\") {\n                  isRatingQuestion = true;\n                  ratingValue = answer.value;\n                }\n                // Вариант 3: Есть отдельные поля для типа и вопроса\n                else if (answer.type === \"RATING\") {\n                  isRatingQuestion = true;\n                  ratingValue = answer.value;\n                }\n                if (isRatingQuestion && ratingValue !== null) {\n                  // Преобразуем значение в число\n                  const numericValue = parseInt(ratingValue, 10);\n                  if (!isNaN(numericValue)) {\n                    ratingSum += numericValue;\n                    ratingCount++;\n                  }\n                }\n              });\n            });\n\n            // Вычисляем средний рейтинг\n            const averageRating = ratingCount > 0 ? ratingSum / ratingCount : 0;\n\n            // Определяем уровень проблемности на основе среднего рейтинга\n            let issueLevel = \"низкий\";\n            if (averageRating <= 3) {\n              issueLevel = \"высокий\";\n            } else if (averageRating <= 6) {\n              issueLevel = \"средний\";\n            }\n            return {\n              ...survey,\n              averageRating: averageRating.toFixed(1),\n              issueLevel,\n              responseCount: responses.length\n            };\n          } catch (error) {\n            console.error(`Ошибка при получении ответов для опросника ${survey.id}:`, error);\n            return {\n              ...survey,\n              averageRating: \"Н/Д\",\n              issueLevel: \"неизвестно\",\n              responseCount: 0\n            };\n          }\n        }));\n        setSurveys(surveysWithRatings);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Ошибка при загрузке опросников:\", error);\n        setError(\"Не удалось загрузить данные опросников\");\n        setLoading(false);\n      }\n    };\n    loadSurveysWithRatings();\n  }, [navigate]);\n\n  // Функция для получения класса на основе уровня проблемности\n  const getIssueLevelClass = level => {\n    switch (level) {\n      case \"высокий\":\n        return \"issue-level-high\";\n      case \"средний\":\n        return \"issue-level-medium\";\n      case \"низкий\":\n        return \"issue-level-low\";\n      default:\n        return \"issue-level-unknown\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      user: currentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"issues-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u041F\\u0440\\u043E\\u0431\\u043B\\u0435\\u043C\\u043D\\u044B\\u0435 \\u043C\\u0435\\u0441\\u0442\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this) : surveys.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data-message\",\n        children: \"\\u041D\\u0435\\u0442 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u044B\\u0445 \\u043E\\u043F\\u0440\\u043E\\u0441\\u043D\\u0438\\u043A\\u043E\\u0432\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"issues-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"issues-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u043F\\u0440\\u043E\\u0441\\u043D\\u0438\\u043A\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0421\\u0440\\u0435\\u0434\\u043D\\u044F\\u044F \\u043E\\u0446\\u0435\\u043D\\u043A\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u0423\\u0440\\u043E\\u0432\\u0435\\u043D\\u044C \\u043F\\u0440\\u043E\\u0431\\u043B\\u0435\\u043C\\u043D\\u043E\\u0441\\u0442\\u0438\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: surveys.map(survey => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: survey.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: survey.averageRating\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `issue-level ${getIssueLevelClass(survey.issueLevel)}`,\n                  children: survey.issueLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: survey.responseCount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this)]\n            }, survey.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(IssuesPage, \"emDTe9NzI7cc2TeGcuDiKg5kTnI=\", false, function () {\n  return [useNavigate];\n});\n_c = IssuesPage;\nexport default IssuesPage;\nvar _c;\n$RefreshReg$(_c, \"IssuesPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Sidebar","authService","surveyService","jsxDEV","_jsxDEV","IssuesPage","_s","currentUser","setCurrentUser","surveys","setSurveys","loading","setLoading","error","setError","navigate","user","getCurrentUser","role","loadSurveysWithRatings","surveysResponse","getAllSurveys","surveysData","Array","isArray","content","data","items","console","log","surveysWithRatings","Promise","all","map","survey","responsesData","getSurveyResponses","id","responses","warn","ratingSum","ratingCount","forEach","response","answersArray","answers","questionAnswers","answer","isRatingQuestion","ratingValue","question","type","value","questionType","numericValue","parseInt","isNaN","averageRating","issueLevel","toFixed","responseCount","length","getIssueLevelClass","level","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","_c","$RefreshReg$"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/pages/Issues/IssuesPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { useNavigate } from \"react-router-dom\"\nimport Sidebar from \"../../components/common/Sidebar\"\nimport { authService } from \"../../api/auth\"\nimport { surveyService } from \"../../api/survey\"\nimport \"./IssuesPage.css\"\n\nconst IssuesPage = () => {\n  const [currentUser, setCurrentUser] = useState(null)\n  const [surveys, setSurveys] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    const user = authService.getCurrentUser()\n    if (!user || (user.role !== \"ADMIN\" && user.role !== \"MANAGER\")) {\n      navigate(\"/login\")\n      return\n    }\n    setCurrentUser(user)\n\n    // Загрузка опросников и их рейтингов\n    const loadSurveysWithRatings = async () => {\n      try {\n        setLoading(true)\n        // Получаем все опросники\n        const surveysResponse = await surveyService.getAllSurveys()\n\n        // Проверяем формат данных и преобразуем в массив при необходимости\n        let surveysData = []\n\n        if (Array.isArray(surveysResponse)) {\n          surveysData = surveysResponse\n        } else if (surveysResponse && typeof surveysResponse === \"object\") {\n          // Проверяем различные возможные структуры ответа\n          if (Array.isArray(surveysResponse.content)) {\n            surveysData = surveysResponse.content\n          } else if (Array.isArray(surveysResponse.data)) {\n            surveysData = surveysResponse.data\n          } else if (Array.isArray(surveysResponse.items)) {\n            surveysData = surveysResponse.items\n          } else if (Array.isArray(surveysResponse.surveys)) {\n            surveysData = surveysResponse.surveys\n          } else {\n            console.error(\"Неподдерживаемая структура данных:\", surveysResponse)\n            setError(\"Неподдерживаемый формат данных от API\")\n            setLoading(false)\n            return\n          }\n        } else {\n          console.error(\"Неподдерживаемый тип данных:\", typeof surveysResponse)\n          setError(\"Некорректный ответ от API\")\n          setLoading(false)\n          return\n        }\n\n        console.log(\"Обработанные данные опросников:\", surveysData)\n\n        // Для каждого опросника получаем ответы и вычисляем средний рейтинг\n        const surveysWithRatings = await Promise.all(\n          surveysData.map(async survey => {\n            try {\n              // Получаем ответы на опросник\n              const responsesData = await surveyService.getSurveyResponses(\n                survey.id\n              )\n\n              // Проверяем формат данных ответов\n              let responses = []\n              if (Array.isArray(responsesData)) {\n                responses = responsesData\n              } else if (responsesData && typeof responsesData === \"object\") {\n                if (Array.isArray(responsesData.content)) {\n                  responses = responsesData.content\n                } else if (Array.isArray(responsesData.data)) {\n                  responses = responsesData.data\n                } else if (Array.isArray(responsesData.responses)) {\n                  responses = responsesData.responses\n                } else {\n                  console.warn(\n                    `Неподдерживаемая структура данных ответов для опросника ${survey.id}:`,\n                    responsesData\n                  )\n                  responses = []\n                }\n              }\n\n              console.log(`Ответы для опросника ${survey.id}:`, responses)\n\n              // Находим среди ответов те, которые относятся к вопросам типа RATING\n              let ratingSum = 0\n              let ratingCount = 0\n\n              // Перебираем все ответы и находим рейтинговые вопросы\n              responses.forEach(response => {\n                // Проверяем различные форматы ответов\n                let answersArray = []\n\n                if (response.answers && Array.isArray(response.answers)) {\n                  // Стандартный формат с массивом answers\n                  answersArray = response.answers\n                } else if (\n                  response.questionAnswers &&\n                  Array.isArray(response.questionAnswers)\n                ) {\n                  // Альтернативный формат с questionAnswers\n                  answersArray = response.questionAnswers\n                } else if (Array.isArray(response)) {\n                  // Если сам response - это массив ответов\n                  answersArray = response\n                }\n\n                // Обрабатываем массив ответов\n                answersArray.forEach(answer => {\n                  // Проверяем различные форматы ответов для определения типа вопроса\n                  let isRatingQuestion = false\n                  let ratingValue = null\n\n                  // Вариант 1: Ответ содержит объект question с типом\n                  if (answer.question && answer.question.type === \"RATING\") {\n                    isRatingQuestion = true\n                    ratingValue = answer.value\n                  }\n                  // Вариант 2: Тип вопроса указан непосредственно в ответе\n                  else if (answer.questionType === \"RATING\") {\n                    isRatingQuestion = true\n                    ratingValue = answer.value\n                  }\n                  // Вариант 3: Есть отдельные поля для типа и вопроса\n                  else if (answer.type === \"RATING\") {\n                    isRatingQuestion = true\n                    ratingValue = answer.value\n                  }\n\n                  if (isRatingQuestion && ratingValue !== null) {\n                    // Преобразуем значение в число\n                    const numericValue = parseInt(ratingValue, 10)\n                    if (!isNaN(numericValue)) {\n                      ratingSum += numericValue\n                      ratingCount++\n                    }\n                  }\n                })\n              })\n\n              // Вычисляем средний рейтинг\n              const averageRating =\n                ratingCount > 0 ? ratingSum / ratingCount : 0\n\n              // Определяем уровень проблемности на основе среднего рейтинга\n              let issueLevel = \"низкий\"\n              if (averageRating <= 3) {\n                issueLevel = \"высокий\"\n              } else if (averageRating <= 6) {\n                issueLevel = \"средний\"\n              }\n\n              return {\n                ...survey,\n                averageRating: averageRating.toFixed(1),\n                issueLevel,\n                responseCount: responses.length,\n              }\n            } catch (error) {\n              console.error(\n                `Ошибка при получении ответов для опросника ${survey.id}:`,\n                error\n              )\n              return {\n                ...survey,\n                averageRating: \"Н/Д\",\n                issueLevel: \"неизвестно\",\n                responseCount: 0,\n              }\n            }\n          })\n        )\n\n        setSurveys(surveysWithRatings)\n        setLoading(false)\n      } catch (error) {\n        console.error(\"Ошибка при загрузке опросников:\", error)\n        setError(\"Не удалось загрузить данные опросников\")\n        setLoading(false)\n      }\n    }\n\n    loadSurveysWithRatings()\n  }, [navigate])\n\n  // Функция для получения класса на основе уровня проблемности\n  const getIssueLevelClass = level => {\n    switch (level) {\n      case \"высокий\":\n        return \"issue-level-high\"\n      case \"средний\":\n        return \"issue-level-medium\"\n      case \"низкий\":\n        return \"issue-level-low\"\n      default:\n        return \"issue-level-unknown\"\n    }\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <Sidebar user={currentUser} />\n      <div className=\"dashboard-content\">\n        <div className=\"issues-header\">\n          <h1>Проблемные места</h1>\n        </div>\n\n        {loading ? (\n          <div className=\"loading-indicator\">Загрузка данных...</div>\n        ) : error ? (\n          <div className=\"error-message\">{error}</div>\n        ) : surveys.length === 0 ? (\n          <div className=\"no-data-message\">Нет доступных опросников</div>\n        ) : (\n          <div className=\"issues-table-container\">\n            <table className=\"issues-table\">\n              <thead>\n                <tr>\n                  <th>Название опросника</th>\n                  <th>Средняя оценка</th>\n                  <th>Уровень проблемности</th>\n                  <th>Количество ответов</th>\n                </tr>\n              </thead>\n              <tbody>\n                {surveys.map(survey => (\n                  <tr key={survey.id}>\n                    <td>{survey.title}</td>\n                    <td>{survey.averageRating}</td>\n                    <td>\n                      <span\n                        className={`issue-level ${getIssueLevelClass(\n                          survey.issueLevel\n                        )}`}\n                      >\n                        {survey.issueLevel}\n                      </span>\n                    </td>\n                    <td>{survey.responseCount}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default IssuesPage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}