{"ast":null,"code":"var _jsxFileName = \"/Users/shirokiy/Desktop/Repositories/\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\u044B/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { authService } from \"../../api/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  adminOnly = false\n}) => {\n  const isAuthenticated = authService.isAuthenticated();\n  const currentUser = authService.getCurrentUser();\n  if (!isAuthenticated) {\n    // Пользователь не авторизован, перенаправляем на страницу входа\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n  if (adminOnly && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) !== \"admin\") {\n    // Если маршрут только для администраторов, а текущий пользователь не админ\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","authService","jsxDEV","_jsxDEV","ProtectedRoute","children","adminOnly","isAuthenticated","currentUser","getCurrentUser","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/components/common/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\"\nimport { Navigate } from \"react-router-dom\"\nimport { authService } from \"../../api/auth\"\n\nconst ProtectedRoute = ({ children, adminOnly = false }) => {\n  const isAuthenticated = authService.isAuthenticated()\n  const currentUser = authService.getCurrentUser()\n\n  if (!isAuthenticated) {\n    // Пользователь не авторизован, перенаправляем на страницу входа\n    return <Navigate to=\"/login\" replace />\n  }\n\n  if (adminOnly && currentUser?.role !== \"admin\") {\n    // Если маршрут только для администраторов, а текущий пользователь не админ\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  return children\n}\n\nexport default ProtectedRoute\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS,GAAG;AAAM,CAAC,KAAK;EAC1D,MAAMC,eAAe,GAAGN,WAAW,CAACM,eAAe,CAAC,CAAC;EACrD,MAAMC,WAAW,GAAGP,WAAW,CAACQ,cAAc,CAAC,CAAC;EAEhD,IAAI,CAACF,eAAe,EAAE;IACpB;IACA,oBAAOJ,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,IAAIT,SAAS,IAAI,CAAAE,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,IAAI,MAAK,OAAO,EAAE;IAC9C;IACA,oBAAOb,OAAA,CAACH,QAAQ;MAACU,EAAE,EAAC,YAAY;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7C;EAEA,OAAOV,QAAQ;AACjB,CAAC;AAAAY,EAAA,GAfKb,cAAc;AAiBpB,eAAeA,cAAc;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}