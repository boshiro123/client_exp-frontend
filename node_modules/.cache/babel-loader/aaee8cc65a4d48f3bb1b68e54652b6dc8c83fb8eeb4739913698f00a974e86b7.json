{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./auth\";\n\n/**\n * ВНИМАНИЕ! Этот сервис предназначен для использования с реальным сервером.\n * Если сервер еще не реализован, используйте вместо него mock-survey-service.js\n *\n * Для переключения между ними измените импорт в DashboardPage.jsx:\n * - Для мок-сервиса: import { mockSurveyService as surveyService } from \"../../api/mock-survey-service\"\n * - Для реального сервиса: import { surveyService } from \"../../api/survey\"\n */\n\nconst API_URL = \"http://localhost:8080/api/surveys\";\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL\n    });\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(config => {\n      // Добавляем токен авторизации к заголовкам запроса\n      const token = authService.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Временные тестовые данные\n    this.mockData = [{\n      id: \"mock1\",\n      title: \"Опрос о качестве обслуживания\",\n      description: \"Оценка удовлетворенности клиентов\",\n      status: \"активный\",\n      startDate: \"2023-05-01\",\n      endDate: \"2023-12-31\",\n      createdAt: \"2023-05-01T12:00:00Z\"\n    }, {\n      id: \"mock2\",\n      title: \"Исследование предпочтений пользователей\",\n      description: \"Анализ потребностей целевой аудитории\",\n      status: \"черновик\",\n      startDate: \"2023-06-01\",\n      endDate: null,\n      createdAt: \"2023-05-15T14:30:00Z\"\n    }, {\n      id: \"mock3\",\n      title: \"Тестовый опрос\",\n      description: \"Проверка работы системы\",\n      status: \"завершенный\",\n      startDate: \"2023-04-01\",\n      endDate: \"2023-04-30\",\n      createdAt: \"2023-03-28T09:15:00Z\"\n    }];\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      // Временное решение для тестирования\n      console.log(\"Имитация создания опросника:\", surveyData);\n\n      // Создаем новый объект с ID и датами\n      const newSurvey = {\n        ...surveyData,\n        id: \"mock\" + Date.now(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Добавляем его в мок-данные\n      this.mockData.push(newSurvey);\n      return newSurvey;\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.post(\"\", surveyData)\n      // return response.data\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error);\n      throw error;\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      // Временное решение для тестирования\n      console.log(\"Возвращаем тестовые данные вместо запроса к API\");\n      return this.mockData;\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.get(\"\")\n      // return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error);\n      throw error;\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      // Временное решение для тестирования\n      const survey = this.mockData.find(s => s.id === id);\n      if (!survey) {\n        throw new Error(\"Опросник не найден\");\n      }\n      return survey;\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.get(`/${id}`)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      // Временное решение для тестирования\n      const index = this.mockData.findIndex(s => s.id === id);\n      if (index === -1) {\n        throw new Error(\"Опросник не найден\");\n      }\n      const updatedSurvey = {\n        ...this.mockData[index],\n        ...surveyData,\n        id,\n        updatedAt: new Date().toISOString()\n      };\n      this.mockData[index] = updatedSurvey;\n      return updatedSurvey;\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.put(`/${id}`, surveyData)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      // Временное решение для тестирования\n      const initialLength = this.mockData.length;\n      this.mockData = this.mockData.filter(s => s.id !== id);\n      if (initialLength === this.mockData.length) {\n        throw new Error(\"Опросник не найден\");\n      }\n      return {\n        success: true,\n        message: \"Опросник успешно удален\"\n      };\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.delete(`/${id}`)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      // Временное решение для тестирования\n      const index = this.mockData.findIndex(s => s.id === id);\n      if (index === -1) {\n        throw new Error(\"Опросник не найден\");\n      }\n      this.mockData[index].status = status;\n      this.mockData[index].updatedAt = new Date().toISOString();\n      return this.mockData[index];\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.patch(`/${id}/status`, { status })\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n}\nexport const surveyService = new SurveyService();","map":{"version":3,"names":["axios","authService","API_URL","SurveyService","constructor","api","create","baseURL","interceptors","request","use","config","token","getToken","headers","Authorization","error","Promise","reject","mockData","id","title","description","status","startDate","endDate","createdAt","createSurvey","surveyData","console","log","newSurvey","Date","now","toISOString","updatedAt","push","getAllSurveys","getSurveyById","survey","find","s","Error","updateSurvey","index","findIndex","updatedSurvey","deleteSurvey","initialLength","length","filter","success","message","changeSurveyStatus","surveyService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/survey.js"],"sourcesContent":["import axios from \"axios\"\nimport { authService } from \"./auth\"\n\n/**\n * ВНИМАНИЕ! Этот сервис предназначен для использования с реальным сервером.\n * Если сервер еще не реализован, используйте вместо него mock-survey-service.js\n *\n * Для переключения между ними измените импорт в DashboardPage.jsx:\n * - Для мок-сервиса: import { mockSurveyService as surveyService } from \"../../api/mock-survey-service\"\n * - Для реального сервиса: import { surveyService } from \"../../api/survey\"\n */\n\nconst API_URL = \"http://localhost:8080/api/surveys\"\n\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n    })\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(\n      config => {\n        // Добавляем токен авторизации к заголовкам запроса\n        const token = authService.getToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      error => {\n        return Promise.reject(error)\n      }\n    )\n\n    // Временные тестовые данные\n    this.mockData = [\n      {\n        id: \"mock1\",\n        title: \"Опрос о качестве обслуживания\",\n        description: \"Оценка удовлетворенности клиентов\",\n        status: \"активный\",\n        startDate: \"2023-05-01\",\n        endDate: \"2023-12-31\",\n        createdAt: \"2023-05-01T12:00:00Z\",\n      },\n      {\n        id: \"mock2\",\n        title: \"Исследование предпочтений пользователей\",\n        description: \"Анализ потребностей целевой аудитории\",\n        status: \"черновик\",\n        startDate: \"2023-06-01\",\n        endDate: null,\n        createdAt: \"2023-05-15T14:30:00Z\",\n      },\n      {\n        id: \"mock3\",\n        title: \"Тестовый опрос\",\n        description: \"Проверка работы системы\",\n        status: \"завершенный\",\n        startDate: \"2023-04-01\",\n        endDate: \"2023-04-30\",\n        createdAt: \"2023-03-28T09:15:00Z\",\n      },\n    ]\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      // Временное решение для тестирования\n      console.log(\"Имитация создания опросника:\", surveyData)\n\n      // Создаем новый объект с ID и датами\n      const newSurvey = {\n        ...surveyData,\n        id: \"mock\" + Date.now(),\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      }\n\n      // Добавляем его в мок-данные\n      this.mockData.push(newSurvey)\n\n      return newSurvey\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.post(\"\", surveyData)\n      // return response.data\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error)\n      throw error\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      // Временное решение для тестирования\n      console.log(\"Возвращаем тестовые данные вместо запроса к API\")\n      return this.mockData\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.get(\"\")\n      // return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error)\n      throw error\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      // Временное решение для тестирования\n      const survey = this.mockData.find(s => s.id === id)\n      if (!survey) {\n        throw new Error(\"Опросник не найден\")\n      }\n      return survey\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.get(`/${id}`)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      // Временное решение для тестирования\n      const index = this.mockData.findIndex(s => s.id === id)\n      if (index === -1) {\n        throw new Error(\"Опросник не найден\")\n      }\n\n      const updatedSurvey = {\n        ...this.mockData[index],\n        ...surveyData,\n        id,\n        updatedAt: new Date().toISOString(),\n      }\n\n      this.mockData[index] = updatedSurvey\n      return updatedSurvey\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.put(`/${id}`, surveyData)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      // Временное решение для тестирования\n      const initialLength = this.mockData.length\n      this.mockData = this.mockData.filter(s => s.id !== id)\n\n      if (initialLength === this.mockData.length) {\n        throw new Error(\"Опросник не найден\")\n      }\n\n      return { success: true, message: \"Опросник успешно удален\" }\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.delete(`/${id}`)\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      // Временное решение для тестирования\n      const index = this.mockData.findIndex(s => s.id === id)\n      if (index === -1) {\n        throw new Error(\"Опросник не найден\")\n      }\n\n      this.mockData[index].status = status\n      this.mockData[index].updatedAt = new Date().toISOString()\n\n      return this.mockData[index]\n\n      // Раскомментировать для работы с реальным API\n      // const response = await this.api.patch(`/${id}/status`, { status })\n      // return response.data\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n}\n\nexport const surveyService = new SurveyService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}