{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:8080/api\";\nexport const authService = {\n  async login(credentials) {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  async register(userData) {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user));\n    }\n    return response.data;\n  },\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem(\"user\");\n    if (userStr) {\n      return JSON.parse(userStr);\n    }\n    return null;\n  },\n  getToken() {\n    return localStorage.getItem(\"token\");\n  },\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n};\n\n// Настраиваем axios для автоматического добавления токена к запросам\naxios.interceptors.request.use(config => {\n  const token = authService.getToken();\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Обработка ответов с сервера (например, для перенаправления при истечении токена)\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    authService.logout();\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","authService","login","credentials","response","post","data","token","localStorage","setItem","JSON","stringify","user","register","userData","logout","removeItem","getCurrentUser","userStr","getItem","parse","getToken","isAuthenticated","interceptors","request","use","config","headers","error","Promise","reject","status","window","location","href"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/auth.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:8080/api\"\n\nexport const authService = {\n  async login(credentials) {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials)\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token)\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user))\n    }\n    return response.data\n  },\n\n  async register(userData) {\n    const response = await axios.post(`${API_URL}/auth/register`, userData)\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token)\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user))\n    }\n    return response.data\n  },\n\n  logout() {\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user\")\n  },\n\n  getCurrentUser() {\n    const userStr = localStorage.getItem(\"user\")\n    if (userStr) {\n      return JSON.parse(userStr)\n    }\n    return null\n  },\n\n  getToken() {\n    return localStorage.getItem(\"token\")\n  },\n\n  isAuthenticated() {\n    return !!this.getToken()\n  },\n}\n\n// Настраиваем axios для автоматического добавления токена к запросам\naxios.interceptors.request.use(\n  config => {\n    const token = authService.getToken()\n    if (token) {\n      config.headers[\"Authorization\"] = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    return Promise.reject(error)\n  }\n)\n\n// Обработка ответов с сервера (например, для перенаправления при истечении токена)\naxios.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    if (error.response && error.response.status === 401) {\n      authService.logout()\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  }\n)\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,aAAa,EAAEM,WAAW,CAAC;IACvE,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IAClE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMO,QAAQA,CAACC,QAAQ,EAAE;IACvB,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,gBAAgB,EAAEiB,QAAQ,CAAC;IACvE,IAAIV,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAACM,IAAI,CAAC,CAAC;IAClE;IACA,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDS,MAAMA,CAAA,EAAG;IACPP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAcA,CAAA,EAAG;IACf,MAAMC,OAAO,GAAGV,YAAY,CAACW,OAAO,CAAC,MAAM,CAAC;IAC5C,IAAID,OAAO,EAAE;MACX,OAAOR,IAAI,CAACU,KAAK,CAACF,OAAO,CAAC;IAC5B;IACA,OAAO,IAAI;EACb,CAAC;EAEDG,QAAQA,CAAA,EAAG;IACT,OAAOb,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EAEDG,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC;EAC1B;AACF,CAAC;;AAED;AACAzB,KAAK,CAAC2B,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMnB,KAAK,GAAGN,WAAW,CAACoB,QAAQ,CAAC,CAAC;EACpC,IAAId,KAAK,EAAE;IACTmB,MAAM,CAACC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUpB,KAAK,EAAE;EACrD;EACA,OAAOmB,MAAM;AACf,CAAC,EACDE,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhC,KAAK,CAAC2B,YAAY,CAACnB,QAAQ,CAACqB,GAAG,CAC7BrB,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDwB,KAAK,IAAI;EACP,IAAIA,KAAK,CAACxB,QAAQ,IAAIwB,KAAK,CAACxB,QAAQ,CAAC2B,MAAM,KAAK,GAAG,EAAE;IACnD9B,WAAW,CAACc,MAAM,CAAC,CAAC;IACpBiB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}