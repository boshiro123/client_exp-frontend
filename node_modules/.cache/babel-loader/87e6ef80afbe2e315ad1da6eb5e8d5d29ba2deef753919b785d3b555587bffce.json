{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./auth\";\nconst API_URL = \"http://localhost:8080/api/surveys\";\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL\n    });\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(config => {\n      // Добавляем токен авторизации к заголовкам запроса\n      const token = authService.getAuthToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      const response = await this.api.post(\"\", surveyData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error);\n      throw error;\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      const response = await this.api.get(\"\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error);\n      throw error;\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      const response = await this.api.get(`/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      const response = await this.api.put(`/${id}`, surveyData);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      const response = await this.api.delete(`/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      const response = await this.api.patch(`/${id}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error);\n      throw error;\n    }\n  }\n}\nexport const surveyService = new SurveyService();","map":{"version":3,"names":["axios","authService","API_URL","SurveyService","constructor","api","create","baseURL","interceptors","request","use","config","token","getAuthToken","headers","Authorization","error","Promise","reject","createSurvey","surveyData","response","post","data","console","getAllSurveys","get","getSurveyById","id","updateSurvey","put","deleteSurvey","delete","changeSurveyStatus","status","patch","surveyService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/survey.js"],"sourcesContent":["import axios from \"axios\"\nimport { authService } from \"./auth\"\n\nconst API_URL = \"http://localhost:8080/api/surveys\"\n\nclass SurveyService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n    })\n\n    // Добавляем интерцептор для всех запросов\n    this.api.interceptors.request.use(\n      config => {\n        // Добавляем токен авторизации к заголовкам запроса\n        const token = authService.getAuthToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      error => {\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  // Создание нового опросника\n  async createSurvey(surveyData) {\n    try {\n      const response = await this.api.post(\"\", surveyData)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при создании опросника:\", error)\n      throw error\n    }\n  }\n\n  // Получение всех опросников\n  async getAllSurveys() {\n    try {\n      const response = await this.api.get(\"\")\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении опросников:\", error)\n      throw error\n    }\n  }\n\n  // Получение опросника по ID\n  async getSurveyById(id) {\n    try {\n      const response = await this.api.get(`/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при получении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Обновление опросника\n  async updateSurvey(id, surveyData) {\n    try {\n      const response = await this.api.put(`/${id}`, surveyData)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при обновлении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Удаление опросника\n  async deleteSurvey(id) {\n    try {\n      const response = await this.api.delete(`/${id}`)\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при удалении опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n\n  // Изменение статуса опросника\n  async changeSurveyStatus(id, status) {\n    try {\n      const response = await this.api.patch(`/${id}/status`, { status })\n      return response.data\n    } catch (error) {\n      console.error(`Ошибка при изменении статуса опросника с ID ${id}:`, error)\n      throw error\n    }\n  }\n}\n\nexport const surveyService = new SurveyService()\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}