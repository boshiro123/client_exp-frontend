{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:8080/api\";\nexport const clientSegmentsService = {\n  // Получение всех клиентов с их ответами на вопросы\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`);\n\n      // Проверяем ответ API\n      if (!response.data) {\n        return [];\n      }\n\n      // Если response.data уже массив, просто возвращаем его\n      if (Array.isArray(response.data)) {\n        return response.data;\n      }\n\n      // Если response.data - объект, пытаемся найти массив внутри\n      if (Array.isArray(response.data.content)) {\n        return response.data.content;\n      } else if (Array.isArray(response.data.clients)) {\n        return response.data.clients;\n      } else if (Array.isArray(response.data.data)) {\n        return response.data.data;\n      }\n\n      // Если не нашли подходящего массива, возвращаем пустой массив\n      console.warn(\"API response structure is not as expected:\", response.data);\n      return [];\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error);\n      throw error;\n    }\n  },\n  // Получение списка возможных значений для возрастных групп\n  getAgeGroups() {\n    return [{\n      value: \"AGE_18_24\",\n      label: \"18-24 года\"\n    }, {\n      value: \"AGE_25_34\",\n      label: \"25-34 года\"\n    }, {\n      value: \"AGE_35_44\",\n      label: \"35-44 года\"\n    }, {\n      value: \"AGE_45_54\",\n      label: \"45-54 года\"\n    }, {\n      value: \"AGE_55_PLUS\",\n      label: \"55 лет и старше\"\n    }];\n  },\n  // Получение списка возможных значений для регионов Беларуси\n  getRegions() {\n    return [{\n      value: \"BREST\",\n      label: \"Брестская область\"\n    }, {\n      value: \"VITEBSK\",\n      label: \"Витебская область\"\n    }, {\n      value: \"GOMEL\",\n      label: \"Гомельская область\"\n    }, {\n      value: \"GRODNO\",\n      label: \"Гродненская область\"\n    }, {\n      value: \"MINSK_REGION\",\n      label: \"Минская область\"\n    }, {\n      value: \"MOGILEV\",\n      label: \"Могилевская область\"\n    }, {\n      value: \"MINSK_CITY\",\n      label: \"г. Минск\"\n    }];\n  },\n  // Фильтрация клиентов по выбранным критериям\n  filterClients(clients, filters) {\n    return clients.filter(client => {\n      // Фильтр по возрастной группе\n      if (filters.ageGroup && filters.ageGroup !== \"ALL\" && client.ageGroup !== filters.ageGroup) {\n        return false;\n      }\n\n      // Фильтр по региону\n      if (filters.region && filters.region !== \"ALL\" && client.region !== filters.region) {\n        return false;\n      }\n\n      // Фильтр по профессии (поиск подстроки в строке, регистронезависимый)\n      if (filters.profession && client.profession) {\n        const clientProfession = client.profession.toLowerCase();\n        const searchProfession = filters.profession.toLowerCase();\n        if (!clientProfession.includes(searchProfession)) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n};","map":{"version":3,"names":["axios","API_URL","clientSegmentsService","getClientsWithAnswers","response","get","data","Array","isArray","content","clients","console","warn","error","getAgeGroups","value","label","getRegions","filterClients","filters","filter","client","ageGroup","region","profession","clientProfession","toLowerCase","searchProfession","includes"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/client-segments.js"],"sourcesContent":["import axios from \"axios\"\n\nconst API_URL = \"http://localhost:8080/api\"\n\nexport const clientSegmentsService = {\n  // Получение всех клиентов с их ответами на вопросы\n  async getClientsWithAnswers() {\n    try {\n      const response = await axios.get(`${API_URL}/clients/with-answers`)\n\n      // Проверяем ответ API\n      if (!response.data) {\n        return []\n      }\n\n      // Если response.data уже массив, просто возвращаем его\n      if (Array.isArray(response.data)) {\n        return response.data\n      }\n\n      // Если response.data - объект, пытаемся найти массив внутри\n      if (Array.isArray(response.data.content)) {\n        return response.data.content\n      } else if (Array.isArray(response.data.clients)) {\n        return response.data.clients\n      } else if (Array.isArray(response.data.data)) {\n        return response.data.data\n      }\n\n      // Если не нашли подходящего массива, возвращаем пустой массив\n      console.warn(\"API response structure is not as expected:\", response.data)\n      return []\n    } catch (error) {\n      console.error(\"Error fetching clients with answers:\", error)\n      throw error\n    }\n  },\n\n  // Получение списка возможных значений для возрастных групп\n  getAgeGroups() {\n    return [\n      { value: \"AGE_18_24\", label: \"18-24 года\" },\n      { value: \"AGE_25_34\", label: \"25-34 года\" },\n      { value: \"AGE_35_44\", label: \"35-44 года\" },\n      { value: \"AGE_45_54\", label: \"45-54 года\" },\n      { value: \"AGE_55_PLUS\", label: \"55 лет и старше\" },\n    ]\n  },\n\n  // Получение списка возможных значений для регионов Беларуси\n  getRegions() {\n    return [\n      { value: \"BREST\", label: \"Брестская область\" },\n      { value: \"VITEBSK\", label: \"Витебская область\" },\n      { value: \"GOMEL\", label: \"Гомельская область\" },\n      { value: \"GRODNO\", label: \"Гродненская область\" },\n      { value: \"MINSK_REGION\", label: \"Минская область\" },\n      { value: \"MOGILEV\", label: \"Могилевская область\" },\n      { value: \"MINSK_CITY\", label: \"г. Минск\" },\n    ]\n  },\n\n  // Фильтрация клиентов по выбранным критериям\n  filterClients(clients, filters) {\n    return clients.filter(client => {\n      // Фильтр по возрастной группе\n      if (\n        filters.ageGroup &&\n        filters.ageGroup !== \"ALL\" &&\n        client.ageGroup !== filters.ageGroup\n      ) {\n        return false\n      }\n\n      // Фильтр по региону\n      if (\n        filters.region &&\n        filters.region !== \"ALL\" &&\n        client.region !== filters.region\n      ) {\n        return false\n      }\n\n      // Фильтр по профессии (поиск подстроки в строке, регистронезависимый)\n      if (filters.profession && client.profession) {\n        const clientProfession = client.profession.toLowerCase()\n        const searchProfession = filters.profession.toLowerCase()\n        if (!clientProfession.includes(searchProfession)) {\n          return false\n        }\n      }\n\n      return true\n    })\n  },\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}