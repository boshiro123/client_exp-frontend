{"ast":null,"code":"import axios from \"axios\";\nimport { authService } from \"./auth\";\nconst API_URL = \"http://localhost:8080/api/users\";\nclass UserService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL\n    });\n\n    // Добавляем интерцептор для запросов\n    this.api.interceptors.request.use(config => {\n      const token = authService.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n  }\n\n  /**\n   * Получение списка пользователей со статусом PENDING\n   * @returns {Promise<Array>} список пользователей, ожидающих одобрения\n   */\n  async getPendingUsers() {\n    try {\n      const response = await this.api.get(\"/pending\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении списка заявок на регистрацию:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Одобрение регистрации пользователя\n   * @param {Object} approvalData - данные для одобрения\n   * @param {number} approvalData.userId - ID пользователя\n   * @param {string} [approvalData.message] - дополнительное сообщение\n   * @returns {Promise<Object>} результат операции\n   */\n  async approveUser(approvalData) {\n    try {\n      const response = await this.api.post(\"/approve\", approvalData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при одобрении пользователя:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Отклонение регистрации пользователя\n   * @param {number} userId - ID пользователя\n   * @returns {Promise<Object>} результат операции\n   */\n  async rejectUser(userId) {\n    try {\n      const response = await this.api.delete(`/${userId}/reject`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при отклонении пользователя:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Получение списка менеджеров\n   * @returns {Promise<Array>} список пользователей с ролью MANAGER\n   */\n  async getManagers() {\n    try {\n      const response = await this.api.get(\"/managers\");\n      return response.data;\n    } catch (error) {\n      console.error(\"Ошибка при получении списка менеджеров:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Удаление пользователя\n   * @param {number} userId - ID пользователя\n   * @returns {Promise<void>} результат операции\n   */\n  async deleteUser(userId) {\n    try {\n      await this.api.delete(`/${userId}`);\n    } catch (error) {\n      console.error(\"Ошибка при удалении пользователя:\", error);\n      throw error;\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["axios","authService","API_URL","UserService","constructor","api","create","baseURL","interceptors","request","use","config","token","getToken","headers","Authorization","error","Promise","reject","getPendingUsers","response","get","data","console","approveUser","approvalData","post","rejectUser","userId","delete","getManagers","deleteUser","userService"],"sources":["/Users/shirokiy/Desktop/Repositories/Дипломы/ClientExp/client_exp-frontend/src/api/users.js"],"sourcesContent":["import axios from \"axios\"\nimport { authService } from \"./auth\"\n\nconst API_URL = \"http://localhost:8080/api/users\"\n\nclass UserService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_URL,\n    })\n\n    // Добавляем интерцептор для запросов\n    this.api.interceptors.request.use(\n      config => {\n        const token = authService.getToken()\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      error => {\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  /**\n   * Получение списка пользователей со статусом PENDING\n   * @returns {Promise<Array>} список пользователей, ожидающих одобрения\n   */\n  async getPendingUsers() {\n    try {\n      const response = await this.api.get(\"/pending\")\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении списка заявок на регистрацию:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * Одобрение регистрации пользователя\n   * @param {Object} approvalData - данные для одобрения\n   * @param {number} approvalData.userId - ID пользователя\n   * @param {string} [approvalData.message] - дополнительное сообщение\n   * @returns {Promise<Object>} результат операции\n   */\n  async approveUser(approvalData) {\n    try {\n      const response = await this.api.post(\"/approve\", approvalData)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при одобрении пользователя:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * Отклонение регистрации пользователя\n   * @param {number} userId - ID пользователя\n   * @returns {Promise<Object>} результат операции\n   */\n  async rejectUser(userId) {\n    try {\n      const response = await this.api.delete(`/${userId}/reject`)\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при отклонении пользователя:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * Получение списка менеджеров\n   * @returns {Promise<Array>} список пользователей с ролью MANAGER\n   */\n  async getManagers() {\n    try {\n      const response = await this.api.get(\"/managers\")\n      return response.data\n    } catch (error) {\n      console.error(\"Ошибка при получении списка менеджеров:\", error)\n      throw error\n    }\n  }\n\n  /**\n   * Удаление пользователя\n   * @param {number} userId - ID пользователя\n   * @returns {Promise<void>} результат операции\n   */\n  async deleteUser(userId) {\n    try {\n      await this.api.delete(`/${userId}`)\n    } catch (error) {\n      console.error(\"Ошибка при удалении пользователя:\", error)\n      throw error\n    }\n  }\n}\n\nexport const userService = new UserService()\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,QAAQ;AAEpC,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;MACtBC,OAAO,EAAEL;IACX,CAAC,CAAC;;IAEF;IACA,IAAI,CAACG,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAI;MACR,MAAMC,KAAK,GAAGX,WAAW,CAACY,QAAQ,CAAC,CAAC;MACpC,IAAID,KAAK,EAAE;QACTD,MAAM,CAACG,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;MAClD;MACA,OAAOD,MAAM;IACf,CAAC,EACDK,KAAK,IAAI;MACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;EACE,MAAMG,eAAeA,CAAA,EAAG;IACtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAACgB,GAAG,CAAC,UAAU,CAAC;MAC/C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;MAC1E,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMQ,WAAWA,CAACC,YAAY,EAAE;IAC9B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAACqB,IAAI,CAAC,UAAU,EAAED,YAAY,CAAC;MAC9D,OAAOL,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMW,UAAUA,CAACC,MAAM,EAAE;IACvB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAACwB,MAAM,CAAC,IAAID,MAAM,SAAS,CAAC;MAC3D,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMc,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAM,IAAI,CAACf,GAAG,CAACgB,GAAG,CAAC,WAAW,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMe,UAAUA,CAACH,MAAM,EAAE;IACvB,IAAI;MACF,MAAM,IAAI,CAACvB,GAAG,CAACwB,MAAM,CAAC,IAAID,MAAM,EAAE,CAAC;IACrC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMgB,WAAW,GAAG,IAAI7B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}